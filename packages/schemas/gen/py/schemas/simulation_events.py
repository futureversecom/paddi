# generated by datamodel-codegen:
#   filename:  simulation_events.json

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field
from typing_extensions import Literal


class FooterEvent(BaseModel):
    event_type: Literal['FooterEvent']


class TurnStartEvent(BaseModel):
    event_type: Literal['TurnStartEvent']
    turn_index: int


class Result(Enum):
    left = 'left'
    right = 'right'
    draw = 'draw'


class TurnEndEvent(BaseModel):
    event_type: Literal['TurnEndEvent']
    result: Result
    turn_index: int


class CollisionType(Enum):
    top = 'top'
    bottom = 'bottom'
    left = 'left'
    right = 'right'
    paddle_l = 'paddle_l'
    paddle_r = 'paddle_r'


class Vec2D(BaseModel):
    x: float
    y: float


class PaddleProps(BaseModel):
    width: float


class Game(BaseModel):
    width: float
    height: float
    paddle_l: PaddleProps
    paddle_r: PaddleProps


class HeaderEvent(BaseModel):
    event_type: Literal['HeaderEvent']
    version: str = Field('0.0.1', const=True)
    game: Game


class BallCollisionEvent(BaseModel):
    event_type: Literal['BallCollisionEvent']
    frame_index: int
    position: Vec2D
    collision_type: CollisionType


class PaddleFrameState(BaseModel):
    force: Optional[Vec2D] = None
    position: Vec2D
    velocity: Vec2D
    endurance: float


class PaddleFrameEvent(BaseModel):
    event_type: Literal['PaddleFrameEvent']
    frame_index: int
    paddle_l: PaddleFrameState
    paddle_r: PaddleFrameState


class SimulationEvent(BaseModel):
    __root__: Union[
        HeaderEvent, FooterEvent, BallCollisionEvent, PaddleFrameEvent, TurnStartEvent, TurnEndEvent
    ] = Field(..., discriminator='event_type', title='SimulationEvent')


class SimulationEvents(BaseModel):
    __root__: List[SimulationEvent] = Field(
        ..., description='JSON Schema for Pong game simulation events', title='SimulationEvents'
    )
