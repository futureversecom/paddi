/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC721A__IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721A__IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721A",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721A__factory>;
    getContractFactory(
      name: "ERC721AQueryable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721AQueryable__factory>;
    getContractFactory(
      name: "IERC721AQueryable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721AQueryable__factory>;
    getContractFactory(
      name: "IERC721A",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721A__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "IComputeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComputeManager__factory>;
    getContractFactory(
      name: "IComputeRequestManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IComputeRequestManager__factory>;
    getContractFactory(
      name: "IMemoryTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMemoryTree__factory>;
    getContractFactory(
      name: "IPayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPayment__factory>;
    getContractFactory(
      name: "ComputeManagerSimple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComputeManagerSimple__factory>;
    getContractFactory(
      name: "MemoryTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MemoryTree__factory>;
    getContractFactory(
      name: "MemoryTreeEnumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MemoryTreeEnumerable__factory>;
    getContractFactory(
      name: "Challenge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Challenge__factory>;
    getContractFactory(
      name: "GasFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasFaucet__factory>;
    getContractFactory(
      name: "MockASTO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockASTO__factory>;
    getContractFactory(
      name: "MockBrain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBrain__factory>;
    getContractFactory(
      name: "PongComputeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PongComputeManager__factory>;
    getContractFactory(
      name: "PongMemoryTree",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PongMemoryTree__factory>;

    getContractAt(
      name: "ERC721A__IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721A__IERC721Receiver>;
    getContractAt(
      name: "ERC721A",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721A>;
    getContractAt(
      name: "ERC721AQueryable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721AQueryable>;
    getContractAt(
      name: "IERC721AQueryable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721AQueryable>;
    getContractAt(
      name: "IERC721A",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721A>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "IComputeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComputeManager>;
    getContractAt(
      name: "IComputeRequestManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IComputeRequestManager>;
    getContractAt(
      name: "IMemoryTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMemoryTree>;
    getContractAt(
      name: "IPayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPayment>;
    getContractAt(
      name: "ComputeManagerSimple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComputeManagerSimple>;
    getContractAt(
      name: "MemoryTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MemoryTree>;
    getContractAt(
      name: "MemoryTreeEnumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MemoryTreeEnumerable>;
    getContractAt(
      name: "Challenge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Challenge>;
    getContractAt(
      name: "GasFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasFaucet>;
    getContractAt(
      name: "MockASTO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockASTO>;
    getContractAt(
      name: "MockBrain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBrain>;
    getContractAt(
      name: "PongComputeManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PongComputeManager>;
    getContractAt(
      name: "PongMemoryTree",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PongMemoryTree>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
