/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IComputeRequestManagerInterface extends utils.Interface {
  functions: {
    "claimAsto(address,uint256)": FunctionFragment;
    "completeCompute(uint256)": FunctionFragment;
    "requestCompute(address,uint256,uint64,bytes32)": FunctionFragment;
    "revokeCompute(uint256)": FunctionFragment;
    "stakeAsto(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimAsto"
      | "completeCompute"
      | "requestCompute"
      | "revokeCompute"
      | "stakeAsto"
      | "supportsInterface"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimAsto",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeCompute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestCompute",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeCompute",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAsto",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "claimAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeCompute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeAsto", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;

  events: {
    "AccountBalanceCorrected(address,uint256)": EventFragment;
    "ComputeCompleted(address,address,uint256)": EventFragment;
    "ComputeRequested(address,address,uint256,uint256,uint256,bytes32)": EventFragment;
    "ComputeRevoked(address,address,uint256)": EventFragment;
    "DaoFeeUpdated(uint256,uint24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccountBalanceCorrected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ComputeRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DaoFeeUpdated"): EventFragment;
}

export interface AccountBalanceCorrectedEventObject {
  account: string;
  amount: BigNumber;
}
export type AccountBalanceCorrectedEvent = TypedEvent<
  [string, BigNumber],
  AccountBalanceCorrectedEventObject
>;

export type AccountBalanceCorrectedEventFilter =
  TypedEventFilter<AccountBalanceCorrectedEvent>;

export interface ComputeCompletedEventObject {
  requester: string;
  computeManager: string;
  computeId: BigNumber;
}
export type ComputeCompletedEvent = TypedEvent<
  [string, string, BigNumber],
  ComputeCompletedEventObject
>;

export type ComputeCompletedEventFilter =
  TypedEventFilter<ComputeCompletedEvent>;

export interface ComputeRequestedEventObject {
  requester: string;
  computeManager: string;
  optionId: BigNumber;
  computeId: BigNumber;
  computeUnits: BigNumber;
  computeHash: string;
}
export type ComputeRequestedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, string],
  ComputeRequestedEventObject
>;

export type ComputeRequestedEventFilter =
  TypedEventFilter<ComputeRequestedEvent>;

export interface ComputeRevokedEventObject {
  requester: string;
  computeManager: string;
  computeId: BigNumber;
}
export type ComputeRevokedEvent = TypedEvent<
  [string, string, BigNumber],
  ComputeRevokedEventObject
>;

export type ComputeRevokedEventFilter = TypedEventFilter<ComputeRevokedEvent>;

export interface DaoFeeUpdatedEventObject {
  minimumFee: BigNumber;
  percentageFee: number;
}
export type DaoFeeUpdatedEvent = TypedEvent<
  [BigNumber, number],
  DaoFeeUpdatedEventObject
>;

export type DaoFeeUpdatedEventFilter = TypedEventFilter<DaoFeeUpdatedEvent>;

export interface IComputeRequestManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IComputeRequestManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestCompute(
      computeManager: PromiseOrValue<string>,
      optionId: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      computeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimAsto(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeCompute(
    computeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestCompute(
    computeManager: PromiseOrValue<string>,
    optionId: PromiseOrValue<BigNumberish>,
    units: PromiseOrValue<BigNumberish>,
    computeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeCompute(
    computeId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeAsto(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestCompute(
      computeManager: PromiseOrValue<string>,
      optionId: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      computeHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccountBalanceCorrected(address,uint256)"(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): AccountBalanceCorrectedEventFilter;
    AccountBalanceCorrected(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): AccountBalanceCorrectedEventFilter;

    "ComputeCompleted(address,address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      computeId?: null
    ): ComputeCompletedEventFilter;
    ComputeCompleted(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      computeId?: null
    ): ComputeCompletedEventFilter;

    "ComputeRequested(address,address,uint256,uint256,uint256,bytes32)"(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      optionId?: null,
      computeId?: null,
      computeUnits?: null,
      computeHash?: null
    ): ComputeRequestedEventFilter;
    ComputeRequested(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      optionId?: null,
      computeId?: null,
      computeUnits?: null,
      computeHash?: null
    ): ComputeRequestedEventFilter;

    "ComputeRevoked(address,address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      computeId?: null
    ): ComputeRevokedEventFilter;
    ComputeRevoked(
      requester?: PromiseOrValue<string> | null,
      computeManager?: PromiseOrValue<string> | null,
      computeId?: null
    ): ComputeRevokedEventFilter;

    "DaoFeeUpdated(uint256,uint24)"(
      minimumFee?: null,
      percentageFee?: null
    ): DaoFeeUpdatedEventFilter;
    DaoFeeUpdated(
      minimumFee?: null,
      percentageFee?: null
    ): DaoFeeUpdatedEventFilter;
  };

  estimateGas: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestCompute(
      computeManager: PromiseOrValue<string>,
      optionId: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      computeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestCompute(
      computeManager: PromiseOrValue<string>,
      optionId: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      computeHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeCompute(
      computeId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
