/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ContestStruct = {
  state: PromiseOrValue<BigNumberish>;
  initiator: PromiseOrValue<string>;
  acceptor: PromiseOrValue<string>;
  potHalf: PromiseOrValue<BigNumberish>;
};

export type ContestStructOutput = [number, string, string, BigNumber] & {
  state: number;
  initiator: string;
  acceptor: string;
  potHalf: BigNumber;
};

export interface ChallengeInterface extends utils.Interface {
  functions: {
    "ASTO()": FunctionFragment;
    "_signer()": FunctionFragment;
    "acceptContest(bytes32)": FunctionFragment;
    "closeContest(address,bytes32,bytes)": FunctionFragment;
    "contests(bytes32)": FunctionFragment;
    "feeAddress()": FunctionFragment;
    "feeBasis()": FunctionFragment;
    "getContest(bytes32)": FunctionFragment;
    "openContest(address,uint256,bytes32,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeContest(bytes32)": FunctionFragment;
    "setFeeDetails(address,uint256)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ASTO"
      | "_signer"
      | "acceptContest"
      | "closeContest"
      | "contests"
      | "feeAddress"
      | "feeBasis"
      | "getContest"
      | "openContest"
      | "owner"
      | "renounceOwnership"
      | "revokeContest"
      | "setFeeDetails"
      | "setSigner"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ASTO", values?: undefined): string;
  encodeFunctionData(functionFragment: "_signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptContest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "closeContest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "contests",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeBasis", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "openContest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeContest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDetails",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ASTO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptContest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeContest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contests", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeBasis", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getContest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openContest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeContest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ContestAccepted(address,address,uint256,bytes32)": EventFragment;
    "ContestClosed(address,address,uint256,bytes32)": EventFragment;
    "ContestOpened(address,address,uint256,bytes32)": EventFragment;
    "ContestRevoked(address,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContestAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ContestAcceptedEventObject {
  initiator: string;
  acceptor: string;
  potHalf: BigNumber;
  contestHash: string;
}
export type ContestAcceptedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ContestAcceptedEventObject
>;

export type ContestAcceptedEventFilter = TypedEventFilter<ContestAcceptedEvent>;

export interface ContestClosedEventObject {
  winner: string;
  loser: string;
  winnings: BigNumber;
  contestHash: string;
}
export type ContestClosedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ContestClosedEventObject
>;

export type ContestClosedEventFilter = TypedEventFilter<ContestClosedEvent>;

export interface ContestOpenedEventObject {
  initiator: string;
  acceptor: string;
  potHalf: BigNumber;
  contestHash: string;
}
export type ContestOpenedEvent = TypedEvent<
  [string, string, BigNumber, string],
  ContestOpenedEventObject
>;

export type ContestOpenedEventFilter = TypedEventFilter<ContestOpenedEvent>;

export interface ContestRevokedEventObject {
  initiator: string;
  contestHash: string;
}
export type ContestRevokedEvent = TypedEvent<
  [string, string],
  ContestRevokedEventObject
>;

export type ContestRevokedEventFilter = TypedEventFilter<ContestRevokedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Challenge extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChallengeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ASTO(overrides?: CallOverrides): Promise<[string]>;

    _signer(overrides?: CallOverrides): Promise<[string]>;

    acceptContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeContest(
      winner: PromiseOrValue<string>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        state: number;
        initiator: string;
        acceptor: string;
        potHalf: BigNumber;
      }
    >;

    feeAddress(overrides?: CallOverrides): Promise<[string]>;

    feeBasis(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[ContestStructOutput] & { contest: ContestStructOutput }>;

    openContest(
      acceptor: PromiseOrValue<string>,
      potHalf: PromiseOrValue<BigNumberish>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeDetails(
      feeAddress_: PromiseOrValue<string>,
      feeBasis_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSigner(
      signer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ASTO(overrides?: CallOverrides): Promise<string>;

  _signer(overrides?: CallOverrides): Promise<string>;

  acceptContest(
    contestHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeContest(
    winner: PromiseOrValue<string>,
    contestHash: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contests(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber] & {
      state: number;
      initiator: string;
      acceptor: string;
      potHalf: BigNumber;
    }
  >;

  feeAddress(overrides?: CallOverrides): Promise<string>;

  feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

  getContest(
    contestHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<ContestStructOutput>;

  openContest(
    acceptor: PromiseOrValue<string>,
    potHalf: PromiseOrValue<BigNumberish>,
    contestHash: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeContest(
    contestHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeDetails(
    feeAddress_: PromiseOrValue<string>,
    feeBasis_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSigner(
    signer_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ASTO(overrides?: CallOverrides): Promise<string>;

    _signer(overrides?: CallOverrides): Promise<string>;

    acceptContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    closeContest(
      winner: PromiseOrValue<string>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    contests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        state: number;
        initiator: string;
        acceptor: string;
        potHalf: BigNumber;
      }
    >;

    feeAddress(overrides?: CallOverrides): Promise<string>;

    feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

    getContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ContestStructOutput>;

    openContest(
      acceptor: PromiseOrValue<string>,
      potHalf: PromiseOrValue<BigNumberish>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revokeContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDetails(
      feeAddress_: PromiseOrValue<string>,
      feeBasis_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSigner(
      signer_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ContestAccepted(address,address,uint256,bytes32)"(
      initiator?: null,
      acceptor?: null,
      potHalf?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestAcceptedEventFilter;
    ContestAccepted(
      initiator?: null,
      acceptor?: null,
      potHalf?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestAcceptedEventFilter;

    "ContestClosed(address,address,uint256,bytes32)"(
      winner?: null,
      loser?: null,
      winnings?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestClosedEventFilter;
    ContestClosed(
      winner?: null,
      loser?: null,
      winnings?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestClosedEventFilter;

    "ContestOpened(address,address,uint256,bytes32)"(
      initiator?: null,
      acceptor?: null,
      potHalf?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestOpenedEventFilter;
    ContestOpened(
      initiator?: null,
      acceptor?: null,
      potHalf?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestOpenedEventFilter;

    "ContestRevoked(address,bytes32)"(
      initiator?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestRevokedEventFilter;
    ContestRevoked(
      initiator?: null,
      contestHash?: PromiseOrValue<BytesLike> | null
    ): ContestRevokedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    ASTO(overrides?: CallOverrides): Promise<BigNumber>;

    _signer(overrides?: CallOverrides): Promise<BigNumber>;

    acceptContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeContest(
      winner: PromiseOrValue<string>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feeBasis(overrides?: CallOverrides): Promise<BigNumber>;

    getContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openContest(
      acceptor: PromiseOrValue<string>,
      potHalf: PromiseOrValue<BigNumberish>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeDetails(
      feeAddress_: PromiseOrValue<string>,
      feeBasis_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSigner(
      signer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ASTO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeContest(
      winner: PromiseOrValue<string>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contests(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeBasis(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openContest(
      acceptor: PromiseOrValue<string>,
      potHalf: PromiseOrValue<BigNumberish>,
      contestHash: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeContest(
      contestHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDetails(
      feeAddress_: PromiseOrValue<string>,
      feeBasis_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      signer_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
