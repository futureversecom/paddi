/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type { PromiseOrValue } from '../../../../../common'
import type {
  Errors,
  ErrorsInterface,
} from '../../../../../lib/protocol-core/contracts/helpers/Errors'

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'ASTOPaymentFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
    ],
    name: 'AccessError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ComputeInactive',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ComputeRequestClosed',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ComputeRequestRevoked',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: 'slaTimestamp',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'currentTimestamp',
        type: 'uint64',
      },
    ],
    name: 'ComputeSLANotReached',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'availableAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'requestedAmount',
        type: 'uint256',
      },
    ],
    name: 'InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
      {
        internalType: 'address',
        name: 'expectedCaller',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'actualCaller',
        type: 'address',
      },
    ],
    name: 'InvalidCaller',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidComputeIndex',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'InvalidComputeRequest',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
    ],
    name: 'InvalidDisbursement',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
    ],
    name: 'InvalidInput',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
    ],
    name: 'InvalidRegistryIndex',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'errMsg',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'requiredAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'receivedAmount',
        type: 'uint256',
      },
    ],
    name: 'PaymentError',
    type: 'error',
  },
] as const

const _bytecode =
  '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220a595ba7a77d85fe7055f5fce34441e9867fc0c32c56f8f895fdfe8128bf8939964736f6c63430008110033'

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: ErrorsConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors
  }
}
