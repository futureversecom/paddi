/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../common'

export interface GasFaucetInterface extends utils.Interface {
  functions: {
    'BLOCK_DELAY()': FunctionFragment
    'FAUCET_AMOUNT()': FunctionFragment
    'faucet(address)': FunctionFragment
    'getBalance()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'BLOCK_DELAY'
      | 'FAUCET_AMOUNT'
      | 'faucet'
      | 'getBalance',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'BLOCK_DELAY',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'FAUCET_AMOUNT',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'faucet',
    values: [PromiseOrValue<string>],
  ): string
  encodeFunctionData(functionFragment: 'getBalance', values?: undefined): string

  decodeFunctionResult(functionFragment: 'BLOCK_DELAY', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'FAUCET_AMOUNT',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'faucet', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result

  events: {}
}

export interface GasFaucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: GasFaucetInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    BLOCK_DELAY(overrides?: CallOverrides): Promise<[BigNumber]>

    FAUCET_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>

    faucet(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  BLOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>

  FAUCET_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

  faucet(
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getBalance(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    BLOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>

    FAUCET_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

    faucet(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<void>

    getBalance(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    BLOCK_DELAY(overrides?: CallOverrides): Promise<BigNumber>

    FAUCET_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>

    faucet(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getBalance(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    BLOCK_DELAY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    FAUCET_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    faucet(
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
