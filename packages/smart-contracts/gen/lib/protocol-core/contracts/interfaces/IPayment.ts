/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common'

export interface IPaymentInterface extends utils.Interface {
  functions: {
    'claimAsto(address,uint256)': FunctionFragment
    'stakeAsto(address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'claimAsto' | 'stakeAsto',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'claimAsto',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'stakeAsto',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string

  decodeFunctionResult(functionFragment: 'claimAsto', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakeAsto', data: BytesLike): Result

  events: {
    'AccountBalanceCorrected(address,uint256)': EventFragment
    'DaoFeeUpdated(uint256,uint24)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'AccountBalanceCorrected'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'DaoFeeUpdated'): EventFragment
}

export interface AccountBalanceCorrectedEventObject {
  account: string
  amount: BigNumber
}
export type AccountBalanceCorrectedEvent = TypedEvent<
  [string, BigNumber],
  AccountBalanceCorrectedEventObject
>

export type AccountBalanceCorrectedEventFilter =
  TypedEventFilter<AccountBalanceCorrectedEvent>

export interface DaoFeeUpdatedEventObject {
  minimumFee: BigNumber
  percentageFee: number
}
export type DaoFeeUpdatedEvent = TypedEvent<
  [BigNumber, number],
  DaoFeeUpdatedEventObject
>

export type DaoFeeUpdatedEventFilter = TypedEventFilter<DaoFeeUpdatedEvent>

export interface IPayment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IPaymentInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  claimAsto(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  stakeAsto(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'AccountBalanceCorrected(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): AccountBalanceCorrectedEventFilter
    AccountBalanceCorrected(
      account?: PromiseOrValue<string> | null,
      amount?: null,
    ): AccountBalanceCorrectedEventFilter

    'DaoFeeUpdated(uint256,uint24)'(
      minimumFee?: null,
      percentageFee?: null,
    ): DaoFeeUpdatedEventFilter
    DaoFeeUpdated(
      minimumFee?: null,
      percentageFee?: null,
    ): DaoFeeUpdatedEventFilter
  }

  estimateGas: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    claimAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    stakeAsto(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
