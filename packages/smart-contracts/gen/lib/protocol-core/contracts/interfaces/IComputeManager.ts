/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common'

export interface IComputeManagerInterface extends utils.Interface {
  functions: {
    'getComputeOptionDisbursement(uint256,uint256)': FunctionFragment
    'getComputeOptionSLA(uint256,uint64,uint64)': FunctionFragment
    'getComputeOptionUnitCost(uint256,uint64)': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'getComputeOptionDisbursement'
      | 'getComputeOptionSLA'
      | 'getComputeOptionUnitCost'
      | 'supportsInterface',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'getComputeOptionDisbursement',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getComputeOptionSLA',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'getComputeOptionUnitCost',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>],
  ): string

  decodeFunctionResult(
    functionFragment: 'getComputeOptionDisbursement',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getComputeOptionSLA',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getComputeOptionUnitCost',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result

  events: {}
}

export interface IComputeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IComputeManagerInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    getComputeOptionDisbursement(
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
    >

    getComputeOptionSLA(
      index: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { maxTime: BigNumber }>

    getComputeOptionUnitCost(
      index: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { cost: BigNumber }>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  getComputeOptionDisbursement(
    index: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<
    [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
  >

  getComputeOptionSLA(
    index: PromiseOrValue<BigNumberish>,
    startTime: PromiseOrValue<BigNumberish>,
    units: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  getComputeOptionUnitCost(
    index: PromiseOrValue<BigNumberish>,
    units: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<BigNumber>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    getComputeOptionDisbursement(
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [string[], BigNumber[]] & { addresses: string[]; amounts: BigNumber[] }
    >

    getComputeOptionSLA(
      index: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getComputeOptionUnitCost(
      index: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>
  }

  filters: {}

  estimateGas: {
    getComputeOptionDisbursement(
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getComputeOptionSLA(
      index: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getComputeOptionUnitCost(
      index: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    getComputeOptionDisbursement(
      index: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getComputeOptionSLA(
      index: PromiseOrValue<BigNumberish>,
      startTime: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getComputeOptionUnitCost(
      index: PromiseOrValue<BigNumberish>,
      units: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
