/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../../../common'

export declare namespace IMemoryTree {
  export type MemoryNodeStruct = {
    memoryTreeId: PromiseOrValue<BigNumberish>
    children: PromiseOrValue<BigNumberish>[]
    storageURI: PromiseOrValue<string>
  }

  export type MemoryNodeStructOutput = [BigNumber, BigNumber[], string] & {
    memoryTreeId: BigNumber
    children: BigNumber[]
    storageURI: string
  }

  export type MemoryTreeDetailsStruct = {
    brainAddress: PromiseOrValue<string>
    brainId: PromiseOrValue<BigNumberish>
    rootNodes: PromiseOrValue<BigNumberish>[]
  }

  export type MemoryTreeDetailsStructOutput = [
    string,
    BigNumber,
    BigNumber[],
  ] & { brainAddress: string; brainId: BigNumber; rootNodes: BigNumber[] }
}

export interface IMemoryTreeInterface extends utils.Interface {
  functions: {
    'addMemoryTree(address,uint256,bytes32,string,bytes)': FunctionFragment
    'addNode(uint256,bytes32,string,bytes)': FunctionFragment
    'getMemoryNode(uint256)': FunctionFragment
    'getMemoryTreeDetails(uint256)': FunctionFragment
    'getSigner()': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'addMemoryTree'
      | 'addNode'
      | 'getMemoryNode'
      | 'getMemoryTreeDetails'
      | 'getSigner'
      | 'supportsInterface',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'addMemoryTree',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'addNode',
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'getMemoryNode',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'getMemoryTreeDetails',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'getSigner', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>],
  ): string

  decodeFunctionResult(
    functionFragment: 'addMemoryTree',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'addNode', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getMemoryNode',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'getMemoryTreeDetails',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'getSigner', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'supportsInterface',
    data: BytesLike,
  ): Result

  events: {
    'MemoryNodeAdded(address,uint256,uint256,bytes32)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'MemoryNodeAdded'): EventFragment
}

export interface MemoryNodeAddedEventObject {
  brainAddress: string
  brainId: BigNumber
  nodeId: BigNumber
  nodeHash: string
}
export type MemoryNodeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  MemoryNodeAddedEventObject
>

export type MemoryNodeAddedEventFilter = TypedEventFilter<MemoryNodeAddedEvent>

export interface IMemoryTree extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: IMemoryTreeInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    addMemoryTree(
      brainAddress: PromiseOrValue<string>,
      brainId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    addNode(
      parentNodeId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    getMemoryNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IMemoryTree.MemoryNodeStructOutput] & {
        node: IMemoryTree.MemoryNodeStructOutput
      }
    >

    getMemoryTreeDetails(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<
      [IMemoryTree.MemoryTreeDetailsStructOutput] & {
        details: IMemoryTree.MemoryTreeDetailsStructOutput
      }
    >

    getSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  addMemoryTree(
    brainAddress: PromiseOrValue<string>,
    brainId: PromiseOrValue<BigNumberish>,
    nodeHash: PromiseOrValue<BytesLike>,
    storageURI: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  addNode(
    parentNodeId: PromiseOrValue<BigNumberish>,
    nodeHash: PromiseOrValue<BytesLike>,
    storageURI: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  getMemoryNode(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IMemoryTree.MemoryNodeStructOutput>

  getMemoryTreeDetails(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<IMemoryTree.MemoryTreeDetailsStructOutput>

  getSigner(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    addMemoryTree(
      brainAddress: PromiseOrValue<string>,
      brainId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & { treeId: BigNumber; nodeId: BigNumber }
    >

    addNode(
      parentNodeId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMemoryNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IMemoryTree.MemoryNodeStructOutput>

    getMemoryTreeDetails(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<IMemoryTree.MemoryTreeDetailsStructOutput>

    getSigner(overrides?: CallOverrides): Promise<string>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides,
    ): Promise<boolean>
  }

  filters: {
    'MemoryNodeAdded(address,uint256,uint256,bytes32)'(
      brainAddress?: null,
      brainId?: null,
      nodeId?: null,
      nodeHash?: null,
    ): MemoryNodeAddedEventFilter
    MemoryNodeAdded(
      brainAddress?: null,
      brainId?: null,
      nodeId?: null,
      nodeHash?: null,
    ): MemoryNodeAddedEventFilter
  }

  estimateGas: {
    addMemoryTree(
      brainAddress: PromiseOrValue<string>,
      brainId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    addNode(
      parentNodeId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    getMemoryNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getMemoryTreeDetails(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    getSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    addMemoryTree(
      brainAddress: PromiseOrValue<string>,
      brainId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    addNode(
      parentNodeId: PromiseOrValue<BigNumberish>,
      nodeHash: PromiseOrValue<BytesLike>,
      storageURI: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    getMemoryNode(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getMemoryTreeDetails(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    getSigner(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
