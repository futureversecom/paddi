{
  "language": "Solidity",
  "sources": {
    "lib/erc721a/contracts/ERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721A.sol';\n\n/**\n * @dev Interface of ERC721 token receiver.\n */\ninterface ERC721A__IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n/**\n * @title ERC721A\n *\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\n * Non-Fungible Token Standard, including the Metadata extension.\n * Optimized for lower gas during batch mints.\n *\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\n * starting from `_startTokenId()`.\n *\n * Assumptions:\n *\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\n */\ncontract ERC721A is IERC721A {\n    // Bypass for a `--via-ir` bug (https://github.com/chiru-labs/ERC721A/pull/364).\n    struct TokenApprovalRef {\n        address value;\n    }\n\n    // =============================================================\n    //                           CONSTANTS\n    // =============================================================\n\n    // Mask of an entry in packed address data.\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\n\n    // The bit position of `numberMinted` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\n\n    // The bit position of `numberBurned` in packed address data.\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\n\n    // The bit position of `aux` in packed address data.\n    uint256 private constant _BITPOS_AUX = 192;\n\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\n\n    // The bit position of `startTimestamp` in packed ownership.\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\n\n    // The bit mask of the `burned` bit in packed ownership.\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\n\n    // The bit position of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\n\n    // The bit mask of the `nextInitialized` bit in packed ownership.\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\n\n    // The bit position of `extraData` in packed ownership.\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\n\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\n\n    // The mask of the lower 160 bits for addresses.\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\n\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\n    // This limit is to prevent overflows on the address data entries.\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\n    // is required to cause an overflow, which is unrealistic.\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\n\n    // The `Transfer` event signature is given by:\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n\n    // =============================================================\n    //                            STORAGE\n    // =============================================================\n\n    // The next token ID to be minted.\n    uint256 private _currentIndex;\n\n    // The number of tokens burned.\n    uint256 private _burnCounter;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to ownership details\n    // An empty struct value does not necessarily mean the token is unowned.\n    // See {_packedOwnershipOf} implementation for details.\n    //\n    // Bits Layout:\n    // - [0..159]   `addr`\n    // - [160..223] `startTimestamp`\n    // - [224]      `burned`\n    // - [225]      `nextInitialized`\n    // - [232..255] `extraData`\n    mapping(uint256 => uint256) private _packedOwnerships;\n\n    // Mapping owner address to address data.\n    //\n    // Bits Layout:\n    // - [0..63]    `balance`\n    // - [64..127]  `numberMinted`\n    // - [128..191] `numberBurned`\n    // - [192..255] `aux`\n    mapping(address => uint256) private _packedAddressData;\n\n    // Mapping from token ID to approved address.\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // =============================================================\n    //                          CONSTRUCTOR\n    // =============================================================\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _currentIndex = _startTokenId();\n    }\n\n    // =============================================================\n    //                   TOKEN COUNTING OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the starting token ID.\n     * To change the starting token ID, please override this function.\n     */\n    function _startTokenId() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev Returns the next token ID to be minted.\n     */\n    function _nextTokenId() internal view virtual returns (uint256) {\n        return _currentIndex;\n    }\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // Counter underflow is impossible as _burnCounter cannot be incremented\n        // more than `_currentIndex - _startTokenId()` times.\n        unchecked {\n            return _currentIndex - _burnCounter - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total amount of tokens minted in the contract.\n     */\n    function _totalMinted() internal view virtual returns (uint256) {\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\n        // and it is initialized to `_startTokenId()`.\n        unchecked {\n            return _currentIndex - _startTokenId();\n        }\n    }\n\n    /**\n     * @dev Returns the total number of tokens burned.\n     */\n    function _totalBurned() internal view virtual returns (uint256) {\n        return _burnCounter;\n    }\n\n    // =============================================================\n    //                    ADDRESS DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        if (owner == address(0)) _revert(BalanceQueryForZeroAddress.selector);\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens minted by `owner`.\n     */\n    function _numberMinted(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the number of tokens burned by or on behalf of `owner`.\n     */\n    function _numberBurned(address owner) internal view returns (uint256) {\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\n    }\n\n    /**\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     */\n    function _getAux(address owner) internal view returns (uint64) {\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\n    }\n\n    /**\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\n     * If there are multiple variables, please pack them into a uint64.\n     */\n    function _setAux(address owner, uint64 aux) internal virtual {\n        uint256 packed = _packedAddressData[owner];\n        uint256 auxCasted;\n        // Cast `aux` with assembly to avoid redundant masking.\n        assembly {\n            auxCasted := aux\n        }\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\n        _packedAddressData[owner] = packed;\n    }\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        // The interface IDs are constants representing the first 4 bytes\n        // of the XOR of all function selectors in the interface.\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\n        return\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\n    }\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        if (!_exists(tokenId)) _revert(URIQueryForNonexistentToken.selector);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, it can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return '';\n    }\n\n    // =============================================================\n    //                     OWNERSHIPS OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return address(uint160(_packedOwnershipOf(tokenId)));\n    }\n\n    /**\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\n     * It gradually moves to O(1) as tokens get transferred around over time.\n     */\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\n     */\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\n        return _unpackedOwnership(_packedOwnerships[index]);\n    }\n\n    /**\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\n     */\n    function _initializeOwnershipAt(uint256 index) internal virtual {\n        if (_packedOwnerships[index] == 0) {\n            _packedOwnerships[index] = _packedOwnershipOf(index);\n        }\n    }\n\n    /**\n     * Returns the packed ownership data of `tokenId`.\n     */\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256 packed) {\n        if (_startTokenId() <= tokenId) {\n            packed = _packedOwnerships[tokenId];\n            // If not burned.\n            if (packed & _BITMASK_BURNED == 0) {\n                // If the data at the starting slot does not exist, start the scan.\n                if (packed == 0) {\n                    if (tokenId >= _currentIndex) _revert(OwnerQueryForNonexistentToken.selector);\n                    // Invariant:\n                    // There will always be an initialized ownership slot\n                    // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\n                    // before an unintialized ownership slot\n                    // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\n                    // Hence, `tokenId` will not underflow.\n                    //\n                    // We can directly compare the packed value.\n                    // If the address is zero, packed will be zero.\n                    for (;;) {\n                        unchecked {\n                            packed = _packedOwnerships[--tokenId];\n                        }\n                        if (packed == 0) continue;\n                        return packed;\n                    }\n                }\n                // Otherwise, the data exists and is not burned. We can skip the scan.\n                // This is possible because we have already achieved the target condition.\n                // This saves 2143 gas on transfers of initialized tokens.\n                return packed;\n            }\n        }\n        _revert(OwnerQueryForNonexistentToken.selector);\n    }\n\n    /**\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\n     */\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\n        ownership.addr = address(uint160(packed));\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\n        ownership.burned = packed & _BITMASK_BURNED != 0;\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\n    }\n\n    /**\n     * @dev Packs ownership data into a single uint256.\n     */\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\n        }\n    }\n\n    /**\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\n     */\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\n        // For branchless setting of the `nextInitialized` flag.\n        assembly {\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\n        }\n    }\n\n    // =============================================================\n    //                      APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account. See {ERC721A-_approve}.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     */\n    function approve(address to, uint256 tokenId) public payable virtual override {\n        _approve(to, tokenId, true);\n    }\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        if (!_exists(tokenId)) _revert(ApprovalQueryForNonexistentToken.selector);\n\n        return _tokenApprovals[tokenId].value;\n    }\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\n    }\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted. See {_mint}.\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return\n            _startTokenId() <= tokenId &&\n            tokenId < _currentIndex && // If within bounds,\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\n    }\n\n    /**\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\n     */\n    function _isSenderApprovedOrOwner(\n        address approvedAddress,\n        address owner,\n        address msgSender\n    ) private pure returns (bool result) {\n        assembly {\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            owner := and(owner, _BITMASK_ADDRESS)\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\n            // `msgSender == owner || msgSender == approvedAddress`.\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\n        }\n    }\n\n    /**\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\n     */\n    function _getApprovedSlotAndAddress(uint256 tokenId)\n        private\n        view\n        returns (uint256 approvedAddressSlot, address approvedAddress)\n    {\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\n        assembly {\n            approvedAddressSlot := tokenApproval.slot\n            approvedAddress := sload(approvedAddressSlot)\n        }\n    }\n\n    // =============================================================\n    //                      TRANSFER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        // Mask `from` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        from = address(uint160(uint256(uint160(from)) & _BITMASK_ADDRESS));\n\n        if (address(uint160(prevOwnershipPacked)) != from) _revert(TransferFromIncorrectOwner.selector);\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        // The nested ifs save around 20+ gas over a compound boolean condition.\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n            if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\n\n        _beforeTokenTransfers(from, to, tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // We can directly increment and decrement the balances.\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\n\n            // Updates:\n            // - `address` to the next owner.\n            // - `startTimestamp` to the timestamp of transfering.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                to,\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n        uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n        assembly {\n            // Emit the `Transfer` event.\n            log4(\n                0, // Start of data (0, since no data).\n                0, // End of data (0, since no data).\n                _TRANSFER_EVENT_SIGNATURE, // Signature.\n                from, // `from`.\n                toMasked, // `to`.\n                tokenId // `tokenId`.\n            )\n        }\n        if (toMasked == 0) _revert(TransferToZeroAddress.selector);\n\n        _afterTokenTransfers(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public payable virtual override {\n        safeTransferFrom(from, to, tokenId, '');\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public payable virtual override {\n        transferFrom(from, to, tokenId);\n        if (to.code.length != 0)\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n    }\n\n    /**\n     * @dev Hook that is called before a set of serially-ordered token IDs\n     * are about to be transferred. This includes minting.\n     * And also called before burning one token.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _beforeTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after a set of serially-ordered token IDs\n     * have been transferred. This includes minting.\n     * And also called after one token has been burned.\n     *\n     * `startTokenId` - the first token ID to be transferred.\n     * `quantity` - the amount to be transferred.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` has been minted for `to`.\n     * - When `to` is zero, `tokenId` has been burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _afterTokenTransfers(\n        address from,\n        address to,\n        uint256 startTokenId,\n        uint256 quantity\n    ) internal virtual {}\n\n    /**\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\n     *\n     * `from` - Previous owner of the given token ID.\n     * `to` - Target address that will receive the token.\n     * `tokenId` - Token ID to be transferred.\n     * `_data` - Optional data to send along with the call.\n     *\n     * Returns whether the call correctly returned the expected magic value.\n     */\n    function _checkContractOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\n            bytes4 retval\n        ) {\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\n        } catch (bytes memory reason) {\n            if (reason.length == 0) {\n                _revert(TransferToNonERC721ReceiverImplementer.selector);\n            }\n            assembly {\n                revert(add(32, reason), mload(reason))\n            }\n        }\n    }\n\n    // =============================================================\n    //                        MINT OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _mint(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are incredibly unrealistic.\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\n        // `tokenId` has a maximum limit of 2**256.\n        unchecked {\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\n            uint256 toMasked = uint256(uint160(to)) & _BITMASK_ADDRESS;\n\n            if (toMasked == 0) _revert(MintToZeroAddress.selector);\n\n            uint256 end = startTokenId + quantity;\n            uint256 tokenId = startTokenId;\n\n            do {\n                assembly {\n                    // Emit the `Transfer` event.\n                    log4(\n                        0, // Start of data (0, since no data).\n                        0, // End of data (0, since no data).\n                        _TRANSFER_EVENT_SIGNATURE, // Signature.\n                        0, // `address(0)`.\n                        toMasked, // `to`.\n                        tokenId // `tokenId`.\n                    )\n                }\n                // The `!=` check ensures that large values of `quantity`\n                // that overflows uint256 will make the loop run out of gas.\n            } while (++tokenId != end);\n\n            _currentIndex = end;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Mints `quantity` tokens and transfers them to `to`.\n     *\n     * This function is intended for efficient minting only during contract creation.\n     *\n     * It emits only one {ConsecutiveTransfer} as defined in\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\n     * instead of a sequence of {Transfer} event(s).\n     *\n     * Calling this function outside of contract creation WILL make your contract\n     * non-compliant with the ERC721 standard.\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `quantity` must be greater than 0.\n     *\n     * Emits a {ConsecutiveTransfer} event.\n     */\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\n        uint256 startTokenId = _currentIndex;\n        if (to == address(0)) _revert(MintToZeroAddress.selector);\n        if (quantity == 0) _revert(MintZeroQuantity.selector);\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) _revert(MintERC2309QuantityExceedsLimit.selector);\n\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\n\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\n        unchecked {\n            // Updates:\n            // - `balance += quantity`.\n            // - `numberMinted += quantity`.\n            //\n            // We can directly add to the `balance` and `numberMinted`.\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\n\n            // Updates:\n            // - `address` to the owner.\n            // - `startTimestamp` to the timestamp of minting.\n            // - `burned` to `false`.\n            // - `nextInitialized` to `quantity == 1`.\n            _packedOwnerships[startTokenId] = _packOwnershipData(\n                to,\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\n            );\n\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\n\n            _currentIndex = startTokenId + quantity;\n        }\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\n    }\n\n    /**\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\n     * - `quantity` must be greater than 0.\n     *\n     * See {_mint}.\n     *\n     * Emits a {Transfer} event for each mint.\n     */\n    function _safeMint(\n        address to,\n        uint256 quantity,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, quantity);\n\n        unchecked {\n            if (to.code.length != 0) {\n                uint256 end = _currentIndex;\n                uint256 index = end - quantity;\n                do {\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\n                        _revert(TransferToNonERC721ReceiverImplementer.selector);\n                    }\n                } while (index < end);\n                // Reentrancy protection.\n                if (_currentIndex != end) _revert(bytes4(0));\n            }\n        }\n    }\n\n    /**\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\n     */\n    function _safeMint(address to, uint256 quantity) internal virtual {\n        _safeMint(to, quantity, '');\n    }\n\n    // =============================================================\n    //                       APPROVAL OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_approve(to, tokenId, false)`.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _approve(to, tokenId, false);\n    }\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(\n        address to,\n        uint256 tokenId,\n        bool approvalCheck\n    ) internal virtual {\n        address owner = ownerOf(tokenId);\n\n        if (approvalCheck && _msgSenderERC721A() != owner)\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\n                _revert(ApprovalCallerNotOwnerNorApproved.selector);\n            }\n\n        _tokenApprovals[tokenId].value = to;\n        emit Approval(owner, to, tokenId);\n    }\n\n    // =============================================================\n    //                        BURN OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Equivalent to `_burn(tokenId, false)`.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        _burn(tokenId, false);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\n\n        address from = address(uint160(prevOwnershipPacked));\n\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\n\n        if (approvalCheck) {\n            // The nested ifs save around 20+ gas over a compound boolean condition.\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\n                if (!isApprovedForAll(from, _msgSenderERC721A())) _revert(TransferCallerNotOwnerNorApproved.selector);\n        }\n\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\n\n        // Clear approvals from the previous owner.\n        assembly {\n            if approvedAddress {\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\n                sstore(approvedAddressSlot, 0)\n            }\n        }\n\n        // Underflow of the sender's balance is impossible because we check for\n        // ownership above and the recipient's balance can't realistically overflow.\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\n        unchecked {\n            // Updates:\n            // - `balance -= 1`.\n            // - `numberBurned += 1`.\n            //\n            // We can directly decrement the balance, and increment the number burned.\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\n\n            // Updates:\n            // - `address` to the last owner.\n            // - `startTimestamp` to the timestamp of burning.\n            // - `burned` to `true`.\n            // - `nextInitialized` to `true`.\n            _packedOwnerships[tokenId] = _packOwnershipData(\n                from,\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\n            );\n\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\n                uint256 nextTokenId = tokenId + 1;\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\n                if (_packedOwnerships[nextTokenId] == 0) {\n                    // If the next slot is within bounds.\n                    if (nextTokenId != _currentIndex) {\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\n                    }\n                }\n            }\n        }\n\n        emit Transfer(from, address(0), tokenId);\n        _afterTokenTransfers(from, address(0), tokenId, 1);\n\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\n        unchecked {\n            _burnCounter++;\n        }\n    }\n\n    // =============================================================\n    //                     EXTRA DATA OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Directly sets the extra data for the ownership data `index`.\n     */\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\n        uint256 packed = _packedOwnerships[index];\n        if (packed == 0) _revert(OwnershipNotInitializedForExtraData.selector);\n        uint256 extraDataCasted;\n        // Cast `extraData` with assembly to avoid redundant masking.\n        assembly {\n            extraDataCasted := extraData\n        }\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\n        _packedOwnerships[index] = packed;\n    }\n\n    /**\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\n     * Intended to be overridden by the cosumer contract.\n     *\n     * `previousExtraData` - the value of `extraData` before transfer.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, `tokenId` will be burned by `from`.\n     * - `from` and `to` are never both zero.\n     */\n    function _extraData(\n        address from,\n        address to,\n        uint24 previousExtraData\n    ) internal view virtual returns (uint24) {}\n\n    /**\n     * @dev Returns the next extra data for the packed ownership data.\n     * The returned result is shifted into position.\n     */\n    function _nextExtraData(\n        address from,\n        address to,\n        uint256 prevOwnershipPacked\n    ) private view returns (uint256) {\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\n    }\n\n    // =============================================================\n    //                       OTHER OPERATIONS\n    // =============================================================\n\n    /**\n     * @dev Returns the message sender (defaults to `msg.sender`).\n     *\n     * If you are writing GSN compatible contracts, you need to override this function.\n     */\n    function _msgSenderERC721A() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    /**\n     * @dev Converts a uint256 to its ASCII string decimal representation.\n     */\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\n        assembly {\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit), but\n            // we allocate 0xa0 bytes to keep the free memory pointer 32-byte word aligned.\n            // We will need 1 word for the trailing zeros padding, 1 word for the length,\n            // and 3 words for a maximum of 78 digits. Total: 5 * 0x20 = 0xa0.\n            let m := add(mload(0x40), 0xa0)\n            // Update the free memory pointer to allocate.\n            mstore(0x40, m)\n            // Assign the `str` to the end.\n            str := sub(m, 0x20)\n            // Zeroize the slot after the string.\n            mstore(str, 0)\n\n            // Cache the end of the memory to calculate the length later.\n            let end := str\n\n            // We write the string from rightmost digit to leftmost digit.\n            // The following is essentially a do-while loop that also handles the zero case.\n            // prettier-ignore\n            for { let temp := value } 1 {} {\n                str := sub(str, 1)\n                // Write the character to the pointer.\n                // The ASCII index of the '0' character is 48.\n                mstore8(str, add(48, mod(temp, 10)))\n                // Keep dividing `temp` until zero.\n                temp := div(temp, 10)\n                // prettier-ignore\n                if iszero(temp) { break }\n            }\n\n            let length := sub(end, str)\n            // Move the pointer 32 bytes leftwards to make room for the length.\n            str := sub(str, 0x20)\n            // Store the length.\n            mstore(str, length)\n        }\n    }\n\n    /**\n     * @dev For more efficient reverts.\n     */\n    function _revert(bytes4 errorSelector) internal pure {\n        assembly {\n            mstore(0x00, errorSelector)\n            revert(0x00, 0x04)\n        }\n    }\n}"
    },
    "lib/erc721a/contracts/extensions/ERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport './IERC721AQueryable.sol';\nimport '../ERC721A.sol';\n\n/**\n * @title ERC721AQueryable.\n *\n * @dev ERC721A subclass with convenience query functions.\n */\nabstract contract ERC721AQueryable is ERC721A, IERC721AQueryable {\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId)\n        public\n        view\n        virtual\n        override\n        returns (TokenOwnership memory ownership)\n    {\n        if (tokenId >= _startTokenId()) {\n            if (tokenId < _nextTokenId()) {\n                ownership = _ownershipAt(tokenId);\n                if (!ownership.burned) {\n                    ownership = _ownershipOf(tokenId);\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] calldata tokenIds)\n        external\n        view\n        virtual\n        override\n        returns (TokenOwnership[] memory)\n    {\n        TokenOwnership[] memory ownerships;\n        uint256 i = tokenIds.length;\n        assembly {\n            // Grab the free memory pointer.\n            ownerships := mload(0x40)\n            // Store the length.\n            mstore(ownerships, i)\n            // Allocate one word for the length,\n            // `tokenIds.length` words for the pointers.\n            i := shl(5, i) // Multiply `i` by 32.\n            mstore(0x40, add(add(ownerships, 0x20), i))\n        }\n        while (i != 0) {\n            uint256 tokenId;\n            assembly {\n                i := sub(i, 0x20)\n                tokenId := calldataload(add(tokenIds.offset, i))\n            }\n            TokenOwnership memory ownership = explicitOwnershipOf(tokenId);\n            assembly {\n                // Store the pointer of `ownership` in the `ownerships` array.\n                mstore(add(add(ownerships, 0x20), i), ownership)\n            }\n        }\n        return ownerships;\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view virtual override returns (uint256[] memory) {\n        unchecked {\n            if (start >= stop) _revert(InvalidQueryRange.selector);\n            // Set `start = max(start, _startTokenId())`.\n            if (start < _startTokenId()) {\n                start = _startTokenId();\n            }\n            uint256 stopLimit = _nextTokenId();\n            // Set `stop = min(stop, stopLimit)`.\n            if (stop >= stopLimit) {\n                stop = stopLimit;\n            }\n            uint256[] memory tokenIds;\n            uint256 tokenIdsMaxLength = balanceOf(owner);\n            bool startLtStop = start < stop;\n            assembly {\n                // Set `tokenIdsMaxLength` to zero if `start` is less than `stop`.\n                tokenIdsMaxLength := mul(tokenIdsMaxLength, startLtStop)\n            }\n            if (tokenIdsMaxLength != 0) {\n                // Set `tokenIdsMaxLength = min(balanceOf(owner), stop - start)`,\n                // to cater for cases where `balanceOf(owner)` is too big.\n                if (stop - start <= tokenIdsMaxLength) {\n                    tokenIdsMaxLength = stop - start;\n                }\n                assembly {\n                    // Grab the free memory pointer.\n                    tokenIds := mload(0x40)\n                    // Allocate one word for the length, and `tokenIdsMaxLength` words\n                    // for the data. `shl(5, x)` is equivalent to `mul(32, x)`.\n                    mstore(0x40, add(tokenIds, shl(5, add(tokenIdsMaxLength, 1))))\n                }\n                // We need to call `explicitOwnershipOf(start)`,\n                // because the slot at `start` may not be initialized.\n                TokenOwnership memory ownership = explicitOwnershipOf(start);\n                address currOwnershipAddr;\n                // If the starting slot exists (i.e. not burned),\n                // initialize `currOwnershipAddr`.\n                // `ownership.address` will not be zero,\n                // as `start` is clamped to the valid token ID range.\n                if (!ownership.burned) {\n                    currOwnershipAddr = ownership.addr;\n                }\n                uint256 tokenIdsIdx;\n                // Use a do-while, which is slightly more efficient for this case,\n                // as the array will at least contain one element.\n                do {\n                    ownership = _ownershipAt(start);\n                    assembly {\n                        // if `ownership.burned == false`.\n                        if iszero(mload(add(ownership, 0x40))) {\n                            // if `ownership.addr != address(0)`.\n                            // The `addr` already has it's upper 96 bits clearned,\n                            // since it is written to memory with regular Solidity.\n                            if mload(ownership) {\n                                currOwnershipAddr := mload(ownership)\n                            }\n                            // if `currOwnershipAddr == owner`.\n                            // The `shl(96, x)` is to make the comparison agnostic to any\n                            // dirty upper 96 bits in `owner`.\n                            if iszero(shl(96, xor(currOwnershipAddr, owner))) {\n                                tokenIdsIdx := add(tokenIdsIdx, 1)\n                                mstore(add(tokenIds, shl(5, tokenIdsIdx)), start)\n                            }\n                        }\n                        start := add(start, 1)\n                    }\n                } while (!(start == stop || tokenIdsIdx == tokenIdsMaxLength));\n                // Store the length of the array.\n                assembly {\n                    mstore(tokenIds, tokenIdsIdx)\n                }\n            }\n            return tokenIds;\n        }\n    }\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view virtual override returns (uint256[] memory) {\n        uint256 tokenIdsLength = balanceOf(owner);\n        uint256[] memory tokenIds;\n        assembly {\n            // Grab the free memory pointer.\n            tokenIds := mload(0x40)\n            // Allocate one word for the length, and `tokenIdsMaxLength` words\n            // for the data. `shl(5, x)` is equivalent to `mul(32, x)`.\n            mstore(0x40, add(tokenIds, shl(5, add(tokenIdsLength, 1))))\n            // Store the length of `tokenIds`.\n            mstore(tokenIds, tokenIdsLength)\n        }\n        address currOwnershipAddr;\n        uint256 tokenIdsIdx;\n        for (uint256 i = _startTokenId(); tokenIdsIdx != tokenIdsLength; ) {\n            TokenOwnership memory ownership = _ownershipAt(i);\n            assembly {\n                // if `ownership.burned == false`.\n                if iszero(mload(add(ownership, 0x40))) {\n                    // if `ownership.addr != address(0)`.\n                    // The `addr` already has it's upper 96 bits clearned,\n                    // since it is written to memory with regular Solidity.\n                    if mload(ownership) {\n                        currOwnershipAddr := mload(ownership)\n                    }\n                    // if `currOwnershipAddr == owner`.\n                    // The `shl(96, x)` is to make the comparison agnostic to any\n                    // dirty upper 96 bits in `owner`.\n                    if iszero(shl(96, xor(currOwnershipAddr, owner))) {\n                        tokenIdsIdx := add(tokenIdsIdx, 1)\n                        mstore(add(tokenIds, shl(5, tokenIdsIdx)), i)\n                    }\n                }\n                i := add(i, 1)\n            }\n        }\n        return tokenIds;\n    }\n}\n"
    },
    "lib/erc721a/contracts/extensions/IERC721AQueryable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\nimport '../IERC721A.sol';\n\n/**\n * @dev Interface of ERC721AQueryable.\n */\ninterface IERC721AQueryable is IERC721A {\n    /**\n     * Invalid query range (`start` >= `stop`).\n     */\n    error InvalidQueryRange();\n\n    /**\n     * @dev Returns the `TokenOwnership` struct at `tokenId` without reverting.\n     *\n     * If the `tokenId` is out of bounds:\n     *\n     * - `addr = address(0)`\n     * - `startTimestamp = 0`\n     * - `burned = false`\n     * - `extraData = 0`\n     *\n     * If the `tokenId` is burned:\n     *\n     * - `addr = <Address of owner before token was burned>`\n     * - `startTimestamp = <Timestamp when token was burned>`\n     * - `burned = true`\n     * - `extraData = <Extra data when token was burned>`\n     *\n     * Otherwise:\n     *\n     * - `addr = <Address of owner>`\n     * - `startTimestamp = <Timestamp of start of ownership>`\n     * - `burned = false`\n     * - `extraData = <Extra data at start of ownership>`\n     */\n    function explicitOwnershipOf(uint256 tokenId) external view returns (TokenOwnership memory);\n\n    /**\n     * @dev Returns an array of `TokenOwnership` structs at `tokenIds` in order.\n     * See {ERC721AQueryable-explicitOwnershipOf}\n     */\n    function explicitOwnershipsOf(uint256[] memory tokenIds) external view returns (TokenOwnership[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`,\n     * in the range [`start`, `stop`)\n     * (i.e. `start <= tokenId < stop`).\n     *\n     * This function allows for tokens to be queried if the collection\n     * grows too big for a single call of {ERC721AQueryable-tokensOfOwner}.\n     *\n     * Requirements:\n     *\n     * - `start < stop`\n     */\n    function tokensOfOwnerIn(\n        address owner,\n        uint256 start,\n        uint256 stop\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Returns an array of token IDs owned by `owner`.\n     *\n     * This function scans the ownership mapping and is O(`totalSupply`) in complexity.\n     * It is meant to be called off-chain.\n     *\n     * See {ERC721AQueryable-tokensOfOwnerIn} for splitting the scan into\n     * multiple smaller scans if the collection is large enough to cause\n     * an out-of-gas error (10K collections should be fine).\n     */\n    function tokensOfOwner(address owner) external view returns (uint256[] memory);\n}\n"
    },
    "lib/erc721a/contracts/IERC721A.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// ERC721A Contracts v4.2.3\n// Creator: Chiru Labs\n\npragma solidity ^0.8.4;\n\n/**\n * @dev Interface of ERC721A.\n */\ninterface IERC721A {\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error ApprovalCallerNotOwnerNorApproved();\n\n    /**\n     * The token does not exist.\n     */\n    error ApprovalQueryForNonexistentToken();\n\n    /**\n     * Cannot query the balance for the zero address.\n     */\n    error BalanceQueryForZeroAddress();\n\n    /**\n     * Cannot mint to the zero address.\n     */\n    error MintToZeroAddress();\n\n    /**\n     * The quantity of tokens minted must be more than zero.\n     */\n    error MintZeroQuantity();\n\n    /**\n     * The token does not exist.\n     */\n    error OwnerQueryForNonexistentToken();\n\n    /**\n     * The caller must own the token or be an approved operator.\n     */\n    error TransferCallerNotOwnerNorApproved();\n\n    /**\n     * The token must be owned by `from`.\n     */\n    error TransferFromIncorrectOwner();\n\n    /**\n     * Cannot safely transfer to a contract that does not implement the\n     * ERC721Receiver interface.\n     */\n    error TransferToNonERC721ReceiverImplementer();\n\n    /**\n     * Cannot transfer to the zero address.\n     */\n    error TransferToZeroAddress();\n\n    /**\n     * The token does not exist.\n     */\n    error URIQueryForNonexistentToken();\n\n    /**\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\n     */\n    error MintERC2309QuantityExceedsLimit();\n\n    /**\n     * The `extraData` cannot be set on an unintialized ownership slot.\n     */\n    error OwnershipNotInitializedForExtraData();\n\n    // =============================================================\n    //                            STRUCTS\n    // =============================================================\n\n    struct TokenOwnership {\n        // The address of the owner.\n        address addr;\n        // Stores the start time of ownership with minimal overhead for tokenomics.\n        uint64 startTimestamp;\n        // Whether the token has been burned.\n        bool burned;\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\n        uint24 extraData;\n    }\n\n    // =============================================================\n    //                         TOKEN COUNTERS\n    // =============================================================\n\n    /**\n     * @dev Returns the total number of tokens in existence.\n     * Burned tokens will reduce the count.\n     * To get the total number of tokens minted, please see {_totalMinted}.\n     */\n    function totalSupply() external view returns (uint256);\n\n    // =============================================================\n    //                            IERC165\n    // =============================================================\n\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n\n    // =============================================================\n    //                            IERC721\n    // =============================================================\n\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables\n     * (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in `owner`'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\n     * checking first that contract recipients are aware of the ERC721 protocol\n     * to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move\n     * this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external payable;\n\n    /**\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\n     * whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token\n     * by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external payable;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the\n     * zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external payable;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom}\n     * for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    // =============================================================\n    //                        IERC721Metadata\n    // =============================================================\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n\n    // =============================================================\n    //                           IERC2309\n    // =============================================================\n\n    /**\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\n     * (inclusive) is transferred from `from` to `to`, as defined in the\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\n     *\n     * See {_mintERC2309} for more details.\n     */\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "lib/openzeppelin-contracts/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "lib/protocol-core/contracts/helpers/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/**\n * @dev ASM Protocol - Errors\n */\ncontract Errors {\n    error InvalidInput(string errMsg);\n    string constant INVALID_MULTISIG = \"Invalid Multisig contract\";\n    string constant INVALID_MANAGER = \"Invalid Manager contract\";\n    string constant INVALID_ADDRESS = \"Invalid wallet address\";\n    string constant INVALID_AMOUNT = \"Invalid amount\";\n\n    error AccessError(string errMsg);\n    string internal constant WRONG_TOKEN_ID = \"Wrong token ID\";\n    string internal constant WRONG_TOKEN_OWNER = \"Wrong token owner\";\n    string internal constant WRONG_HASH = \"Wrong hash\";\n    string internal constant NOT_ASSIGNED = \"Address not assigned\";\n\n    error PaymentError(string errMsg, uint256 requiredAmount, uint256 receivedAmount);\n    string internal constant INSUFFICIENT_BALANCE = \"Insufficient balance\";\n    string internal constant NO_PAYMENT_RECEIVED = \"No payment received\";\n    string internal constant NO_PAYMENT_RECOGNIZED = \"MintType/Currency not recognized\";\n    string internal constant CURRENCY_DOES_NOT_SUIT_TYPE = \"Currency doesn't suit type\";\n    string internal constant MINT_TYPE_IS_NOT_SUPPORTED = \"MintType isn't supported\";\n\n    error InvalidCaller(string errMsg, address expectedCaller, address actualCaller);\n    string internal constant MUST_BE_CALLED_BY_COMPUTE_CUSTODIAN = \"Must be called by custodian\";\n    string internal constant MUST_BE_CALLED_BY_OWNER = \"Must be called by owner\";\n    string internal constant MUST_BE_CALLED_BY_REQUESTER = \"Must be called by requester\";\n    string internal constant MUST_BE_CALLED_BY_DAO = \"Must be called by DAO\";\n    string internal constant WRONG_REQUESTER = \"Wrong requester address\";\n\n    error ASTOPaymentFailed(uint256 amount);\n\n    // Compute Manager\n\n    error InvalidComputeIndex();\n    error ComputeInactive();\n\n    // Compute Request Manager\n\n    error InvalidComputeRequest(string errMsg, uint256 value);\n    string internal constant INVALID_COMPUTE_UNITS = \"Invalid compute units\";\n\n    error ComputeRequestClosed();\n    error ComputeRequestRevoked();\n\n    error ComputeSLANotReached(uint64 slaTimestamp, uint64 currentTimestamp);\n\n    error InvalidDisbursement(string errMsg);\n    string internal constant INVALID_ARRAY_LENGTHS = \"Invalid array lengths\";\n    string internal constant INVALID_TOTAL_AMOUNT = \"Invalid total amount\";\n\n    error InsufficientBalance(string errMsg, uint256 availableAmount, uint256 requestedAmount);\n    string internal constant INSUFFICIENT_UNLOCKED_ASTO = \"Insufficient unlocked ASTO\";\n    string internal constant INSUFFICIENT_COMPUTE_CUSTODIAN_ASTO = \"Insufficient Compute Manager ASTO\";\n\n    // Memory Tree\n\n    error InvalidSignature();\n\n    // Asset Stats Registry\n\n    error InvalidRegistryIndex(uint256 index);\n}\n"
    },
    "lib/protocol-core/contracts/interfaces/IComputeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IComputeManager {\n    /**\n     * Get the cost for a given compute option.\n     * @param index The given compute option index.\n     * @param units The number of compute units to run.\n     * @return cost The cost in ASTO.\n     * @dev This function should revert if the compute option is no longer valid.\n     */\n    function getComputeOptionUnitCost(uint256 index, uint64 units) external view returns (uint256 cost);\n\n    /**\n     * Get the disbursement information for given compute option.\n     * @param index The given compute option index.\n     * @param amount The amount of ASTO to be distributed.\n     * @return addresses The addresses to distribute to.\n     * @return amounts The amount to distribute to each address.\n     * @dev The total amounts must be equal to the input amount.\n     * @dev This function must return even when a compute option is no longer valid.\n     */\n    function getComputeOptionDisbursement(uint256 index, uint256 amount)\n        external\n        view\n        returns (address[] memory addresses, uint256[] memory amounts);\n\n    /**\n     * Get the compute SLA timeout for the given compute option.\n     * @param index The given compute option index.\n     * @param startTime The time compute is started (block.timestamp).\n     * @param units The number of compute units to run.\n     * @return maxTime The max time compute is expected to run (block.timestamp).\n     * @dev This function must return even when a compute option is no longer valid.\n     */\n    function getComputeOptionSLA(\n        uint256 index,\n        uint64 startTime,\n        uint64 units\n    ) external view returns (uint64 maxTime);\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
    },
    "lib/protocol-core/contracts/interfaces/IComputeRequestManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./IPayment.sol\";\n\ninterface IComputeRequestManager is IPayment {\n    enum RequestStatus {\n        OPEN,\n        CLOSED,\n        REVOKED\n    }\n    struct ComputeRequest {\n        RequestStatus status;\n        address requester;\n        address computeManager;\n        uint256 optionId;\n        uint64 startTime;\n        uint64 computeUnits;\n        uint256 escrowAmount;\n    }\n\n    event ComputeRequested(\n        address indexed requester,\n        address indexed computeManager,\n        uint256 optionId,\n        uint256 computeId,\n        uint256 computeUnits,\n        bytes32 computeHash\n    );\n    event ComputeCompleted(address indexed requester, address indexed computeManager, uint256 computeId);\n    event ComputeRevoked(address indexed requester, address indexed computeManager, uint256 computeId);\n\n    /**\n     * Request for compute.\n     * @param computeManager The address of the compute manager contract.\n     * @param optionId The given compute option index.\n     * @param units The number of compute units to run.\n     * @return computeId The id of the resulting compute record.\n     * @param computeHash A compute manager identifier for this compute request.\n     * @notice This contract must be authorised to spend ASTO on behalf of the caller.\n     */\n    function requestCompute(\n        address computeManager,\n        uint256 optionId,\n        uint64 units,\n        bytes32 computeHash\n    ) external returns (uint256 computeId);\n\n    /**\n     * Revoke a compute request that has exceeded the SLA.\n     * @param computeId The id of the compute record.\n     * @notice This returns ASTO held in escrow.\n     * @notice The compute request must not be completed and the SLA must have expired.\n     */\n    function revokeCompute(uint256 computeId) external;\n\n    /**\n     * Complete a compute request.\n     * @param computeId The id of the compute record.\n     * @notice This unlocks ASTO held in escrow.\n     * @dev This must be called by the compute manager.\n     */\n    function completeCompute(uint256 computeId) external;\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
    },
    "lib/protocol-core/contracts/interfaces/IMemoryTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IMemoryTree {\n    struct MemoryTreeDetails {\n        address brainAddress;\n        uint256 brainId;\n        uint256[] rootNodes;\n    }\n    struct MemoryNode {\n        uint256 memoryTreeId;\n        uint256[] children;\n        string storageURI;\n    }\n\n    event MemoryNodeAdded(address brainAddress, uint256 brainId, uint256 nodeId, bytes32 nodeHash);\n\n    /**\n     * Add a root node to create a new memory tree for a given brain.\n     * @param brainAddress The address of the brain contract.\n     * @param brainId The token id for the brain.\n     * @param nodeHash A compute manager identifier for this node.\n     * @param storageURI The storage URI for the new node.\n     * @param signature Function parameters hashed and signed by the signer.\n     * @return treeId The new tree id.\n     * @return nodeId The new node id.\n     */\n    function addMemoryTree(\n        address brainAddress,\n        uint256 brainId,\n        bytes32 nodeHash,\n        string memory storageURI,\n        bytes calldata signature\n    ) external returns (uint256 treeId, uint256 nodeId);\n\n    /**\n     * Add a node to the memory tree for a given brain.\n     * @param parentNodeId The parent node for the new node.\n     * @param nodeHash A compute manager identifier for this node.\n     * @param storageURI The storage URI for the new node.\n     * @param signature Function parameters hashed and signed by the signer.\n     * @return nodeId The new node id.\n     */\n    function addNode(\n        uint256 parentNodeId,\n        bytes32 nodeHash,\n        string memory storageURI,\n        bytes calldata signature\n    ) external returns (uint256 nodeId);\n\n    /**\n     * Returns the signer that validates requests.\n     * @return signer The signing address.\n     */\n    function getSigner() external returns (address signer);\n\n    /**\n     * Get memory tree details.\n     * @param index The index of the memory tree details to return.\n     * @return details The memory tree details.\n     */\n    function getMemoryTreeDetails(uint256 index) external view returns (MemoryTreeDetails memory details);\n\n    /**\n     * Get memory tree node.\n     * @param index The index of the memory tree node to return.\n     * @return node The memory tree node.\n     */\n    function getMemoryNode(uint256 index) external view returns (MemoryNode memory node);\n\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\n}\n"
    },
    "lib/protocol-core/contracts/interfaces/IPayment.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IPayment {\n    event AccountBalanceCorrected(address indexed account, uint256 amount);\n    event DaoFeeUpdated(uint256 minimumFee, uint24 percentageFee);\n\n    /**\n     * Claim unlocked ASTO for a claimee.\n     * @param to The address to send the claimed ASTO to.\n     * @param amount The amount of ASTO to claim.\n     * @notice After compute is completed, ASTO is unlocked for claiming.\n     * @notice Caller may claim their unlocked ASTO with this method.\n     */\n    function claimAsto(address to, uint256 amount) external;\n\n    /**\n     * Stake ASTO to be used for payments.\n     * @param to The address to recieve the staked amount.\n     * @param amount The amount of ASTO to stake.\n     * @notice Staked ASTO will be used to pay for compute requests.\n     * @notice Caller may claim their staked ASTO at any time.\n     * @dev This ASTO is added to the callers unlocked balance.\n     */\n    function stakeAsto(address to, uint256 amount) external;\n}\n"
    },
    "lib/protocol-core/contracts/samples/ComputeManagerSimple.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IComputeManager.sol\";\nimport \"../interfaces/IComputeRequestManager.sol\";\nimport \"../helpers/Errors.sol\";\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * ComputeManager.\n * @notice This is a sample implementation.\n */\ncontract ComputeManagerSimple is IComputeManager, ERC165, Ownable, Errors {\n    IComputeRequestManager public immutable computeRequestManager;\n\n    struct ComputeOption {\n        bool enabled; // Compute option is active\n        uint256 unitCost; // ASTO per compute unit\n        uint256 unitSeconds; // Seconds per compute unit\n    }\n    mapping(uint256 => ComputeOption) public computeOptions;\n    uint256 public totalComputeOptions;\n\n    constructor(address computeRequestManager_) {\n        computeRequestManager = IComputeRequestManager(computeRequestManager_);\n    }\n\n    modifier validComputeIndex(uint256 index) {\n        if (index >= totalComputeOptions) revert InvalidComputeIndex();\n        else _;\n    }\n\n    /**\n     * Get the cost for a given compute option.\n     * @param index The given compute option index.\n     * @param units The number of compute units to run.\n     * @return cost The cost in ASTO.\n     * @dev This function should revert if the compute option is no longer valid.\n     */\n    function getComputeOptionUnitCost(uint256 index, uint64 units)\n        public\n        view\n        virtual\n        validComputeIndex(index)\n        returns (uint256 cost)\n    {\n        if (!computeOptions[index].enabled) revert ComputeInactive();\n        return computeOptions[index].unitCost * units;\n    }\n\n    /**\n     * Get the disbursement information for given compute option.\n     * @param index The given compute option index.\n     * @param amount The amount of ASTO to be distributed.\n     * @return addresses The addresses to distribute to.\n     * @return amounts The amount to distribute to each address.\n     * @dev The total amounts must be less or equal to the input amount.\n     * @dev This function must return even when a compute option is no longer valid.\n     */\n    function getComputeOptionDisbursement(uint256 index, uint256 amount)\n        public\n        view\n        virtual\n        validComputeIndex(index)\n        returns (address[] memory addresses, uint256[] memory amounts)\n    {\n        // We always take it all\n        addresses = new address[](1);\n        addresses[0] = owner();\n        amounts = new uint256[](1);\n        amounts[0] = amount;\n        return (addresses, amounts);\n    }\n\n    /**\n     * Get the compute SLA timeout for the given compute option.\n     * @param index The given compute option index.\n     * @param startTime The time compute is started (block.timestamp).\n     * @param units The number of compute units to run.\n     * @return maxTime The max time compute is expected to run (block.timestamp).\n     * @dev This function must return even when a compute option is no longer valid.\n     */\n    function getComputeOptionSLA(\n        uint256 index,\n        uint64 startTime,\n        uint64 units\n    ) public view virtual validComputeIndex(index) returns (uint64 maxTime) {\n        return startTime + (uint64(computeOptions[index].unitSeconds) * units);\n    }\n\n    //\n    // Administration\n    //\n\n    /**\n     * Add a new compute option.\n     * @param unitCost The unit cost of the compute option.\n     * @param unitMinutes The expected number of minutes per compute unit.\n     * @return index The added compute option id.\n     * @notice Only callable by owner.\n     */\n    function addComputeOption(uint256 unitCost, uint256 unitMinutes)\n        external\n        virtual\n        onlyOwner\n        returns (uint256 index)\n    {\n        computeOptions[totalComputeOptions] = ComputeOption(true, unitCost, unitMinutes * 1 minutes);\n        return totalComputeOptions++;\n    }\n\n    /**\n     * Update an compute option.\n     * @param computeId The compute id to update.\n     * @param active The active setting of the compute option.\n     * @param unitCost The unit cost of the compute option.\n     * @param unitMinutes The expected number of minutes per compute unit.\n     * @notice Only callable by owner.\n     */\n    function updateComputeOption(\n        uint256 computeId,\n        bool active,\n        uint256 unitCost,\n        uint256 unitMinutes\n    ) external virtual onlyOwner {\n        computeOptions[computeId] = ComputeOption(active, unitCost, unitMinutes);\n    }\n\n    /**\n     * Complete a compute request.\n     * @param computeId The compute id to update.\n     * @notice Only callable by owner.\n     */\n    function completeCompute(uint256 computeId) external virtual onlyOwner {\n        return computeRequestManager.completeCompute(computeId);\n    }\n\n    /**\n     * Claim unlocked ASTO for the compute manager.\n     * @param to The address to send the claimed ASTO to.\n     * @param amount The amount of ASTO to claim.\n     * @notice Only callable by owner.\n     */\n    function claimAsto(address to, uint256 amount) external virtual onlyOwner {\n        computeRequestManager.claimAsto(to, amount);\n    }\n\n    //\n    // View methods\n    //\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(IComputeManager, ERC165)\n        returns (bool)\n    {\n        return interfaceId == type(IComputeManager).interfaceId || ERC165.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "lib/protocol-core/contracts/samples/MemoryTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"../interfaces/IMemoryTree.sol\";\nimport \"../helpers/Errors.sol\";\nimport \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\nimport \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\";\nimport \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\n\n/**\n * Memory Tree.\n */\ncontract MemoryTree is IMemoryTree, ERC165, Errors, Ownable {\n    using ECDSA for bytes32;\n\n    address private _signer;\n\n    uint256 internal totalTrees;\n    uint256 internal totalNodes;\n    mapping(uint256 => MemoryTreeDetails) internal trees;\n    mapping(uint256 => MemoryNode) internal nodes;\n\n    constructor() {\n        _signer = msg.sender;\n    }\n\n    /**\n     * Checks if the signature matches data signed by the signer.\n     * @param data The data to sign.\n     * @param signature The expected signed data.\n     * @dev Reverts if the signature is invalid.\n     */\n    modifier signed(bytes memory data, bytes memory signature) {\n        address dataSigner = keccak256(data).toEthSignedMessageHash().recover(signature);\n        if (dataSigner != _signer) revert InvalidSignature();\n        _;\n    }\n\n    /**\n     * Add a root node to create a new memory tree for a given brain.\n     * @param brainAddress The address of the brain contract to run compute against.\n     * @param brainId The token id for the brain to run compute against.\n     * @param nodeHash A studio identifier for this node.\n     * @param storageURI The storage URI for the new node.\n     * @param signature Function parameters hashed and signed by the signer.\n     * @return treeId The new tree id.\n     * @return nodeId The new node id.\n     */\n    function addMemoryTree(\n        address brainAddress,\n        uint256 brainId,\n        bytes32 nodeHash,\n        string memory storageURI,\n        bytes calldata signature\n    )\n        public\n        virtual\n        signed(abi.encodePacked(brainAddress, brainId, nodeHash, storageURI), signature)\n        returns (uint256 treeId, uint256 nodeId)\n    {\n        // Check owner\n        _ensureCallerIsOwner(brainAddress, brainId);\n\n        // Add memory tree details\n        uint256[] memory n = new uint256[](1);\n        trees[totalTrees] = MemoryTreeDetails(brainAddress, brainId, n);\n\n        // Add memory node\n        nodeId = createNewNode(totalTrees, storageURI);\n        emit MemoryNodeAdded(brainAddress, brainId, nodeId, nodeHash);\n        trees[totalTrees].rootNodes[0] = nodeId;\n\n        return (totalTrees++, nodeId);\n    }\n\n    /**\n     * Add a node to the memory tree for a given brain.\n     * @param parentNodeId The parent node for the new node.\n     * @param nodeHash A studio identifier for this node.\n     * @param storageURI The storage URI for the new node.\n     * @param signature Function parameters hashed and signed by the signer.\n     * @return nodeId The new node id.\n     */\n    function addNode(\n        uint256 parentNodeId,\n        bytes32 nodeHash,\n        string memory storageURI,\n        bytes calldata signature\n    ) public virtual signed(abi.encodePacked(parentNodeId, nodeHash, storageURI), signature) returns (uint256 nodeId) {\n        // Check owner\n        MemoryNode storage parent = nodes[parentNodeId];\n        MemoryTreeDetails storage tree = trees[parent.memoryTreeId];\n        _ensureCallerIsOwner(tree.brainAddress, tree.brainId);\n\n        nodeId = createNewNode(parent.memoryTreeId, storageURI);\n        emit MemoryNodeAdded(tree.brainAddress, tree.brainId, nodeId, nodeHash);\n        parent.children.push(nodeId);\n        return nodeId;\n    }\n\n    /**\n     * Creates a new node with the given storageURI.\n     * @param memoryTreeId The id of the memory tree.\n     * @param storageURI The storage URI.\n     * @return nodeId The new memory nodes id.\n     */\n    function createNewNode(uint256 memoryTreeId, string memory storageURI) private returns (uint256 nodeId) {\n        nodeId = totalNodes;\n        nodes[nodeId] = MemoryNode(memoryTreeId, new uint256[](0), storageURI);\n        ++totalNodes;\n        return nodeId;\n    }\n\n    //\n    // Admin\n    //\n\n    /**\n     * Set the signer the validates requests.\n     * @param signer The signing address.\n     */\n    function setSigner(address signer) external onlyOwner {\n        _signer = signer;\n    }\n\n    //\n    // Views\n    //\n\n    /**\n     * Ensures the owner is the sender.\n     * @param brainAddress The address of the brain contract.\n     * @param brainId The token id to check.\n     * @dev Reverts if the caller is not the owner.\n     */\n    function _ensureCallerIsOwner(address brainAddress, uint256 brainId) private view {\n        address brainOwner = IERC721(brainAddress).ownerOf(brainId);\n        if (msg.sender != brainOwner) revert InvalidCaller(MUST_BE_CALLED_BY_OWNER, brainOwner, msg.sender);\n    }\n\n    /**\n     * Returns the signer that validates requests.\n     * @return signer The signing address.\n     */\n    function getSigner() external view returns (address signer) {\n        return _signer;\n    }\n\n    /**\n     * Get memory tree details.\n     * @param index The index of the memory tree details to return.\n     * @return details The memory tree details.\n     */\n    function getMemoryTreeDetails(uint256 index) external view returns (MemoryTreeDetails memory details) {\n        return trees[index];\n    }\n\n    /**\n     * Get memory tree node.\n     * @param index The index of the memory tree node to return.\n     * @return node The memory tree node.\n     */\n    function getMemoryNode(uint256 index) external view returns (MemoryNode memory node) {\n        return nodes[index];\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IMemoryTree, ERC165) returns (bool) {\n        return interfaceId == type(IMemoryTree).interfaceId || ERC165.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "lib/protocol-core/contracts/samples/MemoryTreeEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"./MemoryTree.sol\";\n\n/**\n * Memory Tree with enumerable functions.\n */\ncontract MemoryTreeEnumerable is MemoryTree {\n    /**\n     * List all indexes of memory trees associated with the brain.\n     * @param brainAddress The address of the brain contract.\n     * @param brainId The token id for the brain.\n     * @return indexes The indexes of memory trees.\n     * @dev This function is expensive and should NOT be called in write functions.\n     */\n    function memoryTreesOfBrain(address brainAddress, uint256 brainId)\n        external\n        view\n        returns (uint256[] memory indexes)\n    {\n        indexes = new uint256[](totalTrees);\n        uint256 treesAdded;\n\n        for (uint256 i; i < totalTrees; i++) {\n            MemoryTreeDetails memory details = trees[i];\n            if (details.brainAddress == brainAddress && details.brainId == brainId) {\n                indexes[treesAdded] = i;\n                ++treesAdded;\n            }\n        }\n\n        // Resize array\n        assembly {\n            mstore(indexes, treesAdded)\n        }\n        return indexes;\n    }\n\n    /**\n     * List all indexes of memory trees associated with the caller.\n     * @param treeId The id for the memory to enumerate.\n     * @return indexes The indexes of memory tree nodes.\n     * @dev This function is expensive and should NOT be called in write functions.\n     */\n    function memoryNodeIdsOfMemoryTree(uint256 treeId) public view returns (uint256[] memory indexes) {\n        indexes = new uint256[](totalNodes);\n        uint256 nodesAdded;\n\n        // Add all roots\n        uint256[] memory roots = trees[treeId].rootNodes;\n        for (uint256 i; i < roots.length; i++) {\n            indexes[nodesAdded] = roots[i];\n            ++nodesAdded;\n        }\n        // Iterate nodes for children\n        // Added children will be iterated on as well\n        for (uint256 i; i < nodesAdded; i++) {\n            MemoryNode storage node = nodes[indexes[i]];\n            uint256[] memory children = node.children;\n            for (uint256 j; j < children.length; j++) {\n                indexes[nodesAdded] = children[j];\n                ++nodesAdded;\n            }\n        }\n\n        // Resize array\n        assembly {\n            mstore(indexes, nodesAdded)\n        }\n        return indexes;\n    }\n\n    /**\n     * List all indexes of memory trees associated with the caller.\n     * @param treeId The id for the memory to enumerate.\n     * @return treeNodes The memory tree nodes.\n     * @dev This function is expensive and should NOT be called in write functions.\n     */\n    function memoryNodesOfMemoryTree(uint256 treeId) external view returns (MemoryNode[] memory treeNodes) {\n        uint256[] memory indexes = memoryNodeIdsOfMemoryTree(treeId);\n        treeNodes = new MemoryNode[](indexes.length);\n\n        for (uint256 i; i < indexes.length; i++) {\n            treeNodes[i] = nodes[indexes[i]];\n        }\n\n        return treeNodes;\n    }\n}\n"
    },
    "src/Challenge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport 'lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';\nimport {IERC20} from 'lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\nimport {Ownable} from 'lib/openzeppelin-contracts/contracts/access/Ownable.sol';\n\nerror InvalidSignature();\nerror InvalidContestState();\nerror InvalidCaller();\nerror InvalidParams();\nerror PaymentFailed(uint256 amount);\n\nenum ContestState {\n    OPEN,\n    ACCEPTED,\n    CLOSED,\n    REVOKED\n}\n\nstruct Contest {\n    ContestState state;\n    address initiator;\n    address acceptor;\n    uint256 potHalf; // Half of the pot\n}\n\n/**\n * A contract that allows one player to challenge another.\n * Note: Challenge details are managed off chain and signed by the host server.\n */\ncontract Challenge is Ownable {\n    using ECDSA for bytes32;\n\n    address public _signer;\n    IERC20 public immutable ASTO;\n    address public feeAddress;\n    // Fee is charged in basis points\n    uint256 public feeBasis;\n\n    mapping(bytes32 => Contest) public contests;\n\n    event ContestOpened(\n        address initiator,\n        address acceptor,\n        uint256 potHalf,\n        bytes32 indexed contestHash\n    );\n    event ContestAccepted(\n        address initiator,\n        address acceptor,\n        uint256 potHalf,\n        bytes32 indexed contestHash\n    );\n    event ContestClosed(\n        address winner,\n        address loser,\n        uint256 winnings,\n        bytes32 indexed contestHash\n    );\n    event ContestRevoked(address initiator, bytes32 indexed contestHash);\n\n    constructor(\n        address asto,\n        address signer_,\n        address feeAddress_,\n        uint256 feeBasis_\n    ) Ownable() {\n        ASTO = IERC20(asto);\n        _signer = signer_;\n        feeBasis = feeBasis_;\n        feeAddress = feeAddress_;\n    }\n\n    /**\n     * Checks if the signature matches data signed by the signer.\n     * @param data The data to sign.\n     * @param signature The expected signed data.\n     * @dev Reverts if the signature is invalid.\n     */\n    modifier signed(bytes memory data, bytes memory signature) {\n        address dataSigner = keccak256(data).toEthSignedMessageHash().recover(\n            signature\n        );\n        if (dataSigner != _signer) revert InvalidSignature();\n        _;\n    }\n\n    /**\n     * Create an open contest.\n     * @param acceptor The acceptor of the challenge. If address(0), anyone can accept.\n     * @param potHalf The amount added to the pot by the initiator.\n     * @param contestHash The contest hash.\n     * @param signature The server signed contest hash.\n     */\n    function openContest(\n        address acceptor,\n        uint256 potHalf,\n        bytes32 contestHash,\n        bytes calldata signature\n    )\n        external\n        signed(\n            abi.encodePacked(ContestState.OPEN, msg.sender, contestHash),\n            signature\n        )\n    {\n        address msgSender = msg.sender;\n        if (acceptor == msgSender) {\n            // Caller can't be acceptor\n            revert InvalidCaller();\n        }\n        if (contests[contestHash].initiator != address(0)) {\n            // Already opened\n            revert InvalidContestState();\n        }\n        // Take ASTO\n        takeAstoAmount(msgSender, potHalf);\n        // Create contest\n        contests[contestHash] = Contest(\n            ContestState.OPEN,\n            msgSender,\n            acceptor,\n            potHalf\n        );\n        emit ContestOpened(msgSender, acceptor, potHalf, contestHash);\n    }\n\n    /**\n     * Revoke an open contest.\n     * @param contestHash The contest to revoke.\n     * @notice This must be called on an open contest.\n     * @notice This must be called by the initiator of the contest.\n     * @dev Returns ASTO to the initiator.\n     */\n    function revokeContest(bytes32 contestHash) external {\n        Contest storage contest = contests[contestHash];\n        // Check state\n        if (contest.state != ContestState.OPEN) {\n            revert InvalidContestState();\n        }\n        address msgSender = msg.sender;\n        if (contest.initiator != msgSender) {\n            revert InvalidCaller();\n        }\n        // Send back ASTO\n        ASTO.transfer(msgSender, contest.potHalf);\n        // Close it\n        contest.state = ContestState.REVOKED;\n        emit ContestRevoked(contest.initiator, contestHash);\n    }\n\n    /**\n     * Accepts an open contest.\n     * @param contestHash The contest hash.\n     */\n    function acceptContest(bytes32 contestHash) external {\n        Contest storage contest = contests[contestHash];\n        // Check state\n        if (contest.state != ContestState.OPEN) {\n            revert InvalidContestState();\n        }\n        address msgSender = msg.sender;\n        // Check acceptor\n        if (contest.initiator == msgSender) {\n            revert InvalidCaller();\n        } else if (contest.acceptor == address(0)) {\n            contest.acceptor = msgSender;\n        } else if (contest.acceptor != msgSender) {\n            revert InvalidCaller();\n        }\n        // Take pot\n        takeAstoAmount(msgSender, contest.potHalf);\n        // Update state\n        contest.state = ContestState.ACCEPTED;\n        emit ContestAccepted(\n            contest.initiator,\n            contest.acceptor,\n            contest.potHalf,\n            contestHash\n        );\n    }\n\n    /**\n     * Marks a contest as won. Sends the winner the winnings.\n     * @param winner The winner of the contest.\n     * @param contestHash The contest hash.\n     * @param signature The server signed contest hash.\n     */\n    function closeContest(\n        address winner,\n        bytes32 contestHash,\n        bytes calldata signature\n    )\n        external\n        signed(\n            abi.encodePacked(ContestState.CLOSED, winner, contestHash),\n            signature\n        )\n    {\n        Contest storage contest = contests[contestHash];\n        // Check state\n        if (contest.state != ContestState.ACCEPTED) {\n            revert InvalidContestState();\n        }\n\n        // Validate addresses\n        address loser;\n        if (contest.initiator == winner) {\n            loser = contest.acceptor;\n        } else if (contest.acceptor == winner) {\n            loser = contest.initiator;\n        } else {\n            revert InvalidParams();\n        }\n\n        // Calculate winnings\n        uint256 winnings = contest.potHalf * 2;\n        uint256 fee = (winnings * feeBasis) / 10000;\n        winnings -= fee;\n        // Send winnings and fee\n        ASTO.transfer(winner, winnings);\n        ASTO.transfer(feeAddress, fee);\n        // Update state\n        contest.state = ContestState.CLOSED;\n        emit ContestClosed(winner, loser, winnings, contestHash);\n    }\n\n    //\n    // Admin\n    //\n\n    function setSigner(address signer_) external onlyOwner {\n        _signer = signer_;\n    }\n\n    function setFeeDetails(address feeAddress_, uint256 feeBasis_)\n        external\n        onlyOwner\n    {\n        feeBasis = feeBasis_;\n        feeAddress = feeAddress_;\n    }\n\n    //\n    // Internal\n    //\n\n    /**\n     * Take ASTO from the given address.\n     * @param from The address to take from.\n     * @param amount The amount to take.\n     */\n    function takeAstoAmount(address from, uint256 amount) internal {\n        bool success = ASTO.transferFrom(from, address(this), amount);\n        if (!success) revert PaymentFailed(amount);\n    }\n\n    /**\n     * Get the contest.\n     * @param contestHash The contest hash.\n     * @return contest The contest.\n     */\n    function getContest(bytes32 contestHash)\n        external\n        view\n        returns (Contest memory contest)\n    {\n        return contests[contestHash];\n    }\n}\n"
    },
    "src/GasFaucet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nerror AlreadySent();\nerror InsufficientBalance();\nerror TransferFailed();\n\n/**\n * A contract that allows claiming of gas.\n */\ncontract GasFaucet {\n  uint256 public constant FAUCET_AMOUNT = 10e18;\n  uint256 public constant BLOCK_DELAY = 10;\n\n  mapping(address => uint256) sent;\n\n  // Allow receiving gas\n  receive() external payable {}\n\n  /**\n   * Claim the gas token\n   * @notice Requires that no funds have been sent to the address during the last N blocks\n   */\n  function faucet(address addr) external {\n    if (getBalance() < FAUCET_AMOUNT) {\n      revert InsufficientBalance();\n    }\n    uint256 blockNumber = block.number;\n    uint256 lastSent = sent[addr];\n    uint256 blocksPassed = blockNumber - lastSent;\n\n    bool hasSent = lastSent > 0;\n    bool recently = blocksPassed <= BLOCK_DELAY;\n    if (hasSent && recently) {\n      revert AlreadySent();\n    }\n    sent[addr] = blockNumber;\n\n    bool success = payable(addr).send(FAUCET_AMOUNT);\n    if (!success) {\n      revert TransferFailed();\n    }\n  }\n\n  function getBalance() public view returns (uint256) {\n    return payable(address(this)).balance;\n  }\n}\n"
    },
    "src/MockASTO.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport {ERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * A mock implementation of the ASTO ERC20 contract.\n * This contract allows unlimited minting by any caller.\n */\ncontract MockASTO is ERC20 {\n  uint256 public constant FAUCET_AMOUNT = 100 * 10 ** 18;\n\n  constructor() ERC20(\"Altered State Machine Utility Token\", \"ASTO\") {}\n\n  function faucet() external {\n    _mint(msg.sender, FAUCET_AMOUNT);\n  }\n\n  function faucetTo(address to) external {\n    _mint(to, FAUCET_AMOUNT);\n  }\n}\n"
    },
    "src/MockBrain.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport \"lib/erc721a/contracts/extensions/ERC721AQueryable.sol\";\n\n/**\n * A mock implementation of the ASM Gen II Brain ERC721 contract.\n * This contract allows unlimited minting by any caller.\n */\ncontract MockBrain is ERC721AQueryable {\n  string private constant baseURI = \"https://meta.gen-ii-brains.alteredstatemachine.xyz/ipfs/\";\n\n  constructor() ERC721A(\"ASMBrainGenII\", \"ASMBrainGenII\") {}\n\n  function faucet() external {\n    _mint(msg.sender, 1);\n  }\n\n  function faucetTo(address to) external {\n    _mint(to, 1);\n  }\n\n  /**\n   * Get tokenURI for Brain tokenId\n   * @param tokenId The token ID\n   * @return uri The tokenURL as a string\n   */\n  function tokenURI(uint256 tokenId) public view override (IERC721A, ERC721A) returns (string memory uri) {\n    return string.concat(baseURI, cidv0Hashes[tokenId % 100]);\n  }\n\n  // Copy of the first 100 cidv0 hashes of Gen II Brains\n  string[] public cidv0Hashes = [\n    \"QmaakG6REBqYB7BieQC54RtkarXy5ePb8TyyK1ahJprPkt\",\n    \"Qmc32uFGqee9hFa5BwWMwNyLhXqS46cdAr5Ch4ihgVGn9b\",\n    \"QmdQK6v5rFX86LQPBDDF75HUigBZjM8D2eZbGUazz9hUuG\",\n    \"Qmcyqp2EEGmdFxnwx68iVLfcT9ZtFNRZHxab2B9khS9bKk\",\n    \"QmU2youSF3E7SFzbyV5NitDFMQyxYFKAgXs55SeeHew7YD\",\n    \"QmaUL2LTQwWdYmAFHApchobp5MR1K1bEEKsDtemwCa7PjS\",\n    \"QmeVtJ7JyCW2uBYNMXKwa7gLzcgq6JEbsyaUGUaJ9riEjY\",\n    \"QmZqRrgK31JySSaPq2xGbkxbGaPWADkVXwEqjjjGk7UHoS\",\n    \"QmXaaUu8bNAZMdwA343MahaUDCjVDvLkeqaeUHxJir5B5M\",\n    \"Qme8zwWM7181F2ML7V9wk1Hi7SFuuGa3EeLLNuZHjRAByK\",\n    \"QmRg6Xwu7sK1rD32Xh8dmCFdyAndSiMSaXzNcgafiAfxwg\",\n    \"QmesmVBMKSnchcghiUdDXokmfoi4Evrb2EUwoGuHpa6zLT\",\n    \"QmX31hE98KJW7u2Mj22GYrsQC6VRd8bEA6uVDEjnzSGnQY\",\n    \"QmSzN3Fpwc1Y3PjTH1hJjcSqCDzG81RbkiXG6W5ubxdcYD\",\n    \"QmPM62Fety1doisq3TK3sZwY3C725ZKi5K6m9WLyrRWoiy\",\n    \"QmTG1MnLhnQeXgjM1NRKfSx8HJrCSG3rwWWQrcfNzej6V6\",\n    \"QmamZ6X4i9ToyD9eTKCC8mdvSVYAqtZxo8pTdFTMhhh4NQ\",\n    \"QmRWcv7v3rcAzydE8KbNagHcc9yuhSDTdL1k6g5oY8eDBz\",\n    \"QmYDkhKyRxCbBkbG91uaVQ18RWzELfjwktTG7uHH5JwYDk\",\n    \"QmYbJdQcECMa7kKi3n4XLw1ZZS39gt7yn3ZjD8c6dDXKpq\",\n    \"Qmc93fULeQj7VhP51hCjzcTYmSaR1337yAbX6h5FDMFrpd\",\n    \"QmYsgvFe9CvNmueWTtCV5WHfHRErNa23BosovohaXSuEnh\",\n    \"QmSHg6AGoWoxScYb2VE2S3i4QMu3qMhuurNyCT4sThLmss\",\n    \"QmXQiVP4QHNfRENU2dYPyz4pyqfosC67aPJW7n43T5wTAG\",\n    \"QmQUsh7neRB6cC5HmHnBhhQjSiS3d9DrHQNTYo6K5hadNv\",\n    \"QmRyuyhGfRMtorxg3Vu9qnFq2yZLqJ5uhiYTQ1HjTmD5wN\",\n    \"QmQQo4a3asCwZV2kJdMML5z3QiUproy6a8yN7iKqMmZTxu\",\n    \"QmVRK2ksemTVkTUwX2ddJuA4M6eunVSh4YS1yzyyBmUpKF\",\n    \"QmVobj3MzdVBGyX2gHv9cdg6r7AWTmBWs5R6hxKEpi9avU\",\n    \"QmauoKnmZUWxYV5DqbRwRFuLJDKXwRrEsWbxkK4k4JBuBK\",\n    \"QmPfKbsoSHW6jqZh4C86vMDtduXbisi8Ppq354Q3SrffzA\",\n    \"QmTq4JMMysrZXZxVY3C8pjMTL1HYGFwXg1dcqsV1ar6yjK\",\n    \"QmV6WsBEuSrttved4CrR7hCmSi6Juo4iJqP8q1n7bdfmc9\",\n    \"QmaeFM2uJByX8nZtj31aqoMjW9kmxRcqSQ8oEjERFbeVZV\",\n    \"QmTdrHhM452dmWSywZ8devNZf7PyYFPYTBKTbDg5daM6Ri\",\n    \"QmaxtFcocDMw2Je83ZepEnJz6sVn2xEDBpQqurXovQu7th\",\n    \"QmXgE721M3UPmvFPGSTXJCFjMQG9A4UDUcQL7cUKQhN4fh\",\n    \"QmXsakaeCvhrYkmQnX1PfUXfMvMaPpMoEFgN5kg7nGATmW\",\n    \"QmVE2sZ2PPH3A36Di9mx5pcymhi4q6eV9u47ACZbtZPBVY\",\n    \"QmeFJcxZo4ikJoyXqqzqFvAJXiEVeaY4unmy1awmf1DCRm\",\n    \"QmZDriYZLG5ML5Ce7XrnCPGHwaSTKPcYqsbf5PLwsTeoxL\",\n    \"QmYvvqmoJiQMGnQhhETC952sFWhq7G8AXs9Q8bqVusjMPL\",\n    \"QmWG8M8LGw2rMCXFLguemxNevkVs8ckivGYwtpA987cTyF\",\n    \"QmYNg2WGsqHzkZsoNJ8cSNoHK1ywMDJgPJaWXjVivWBArR\",\n    \"QmYfiuZvYcqKsGoynAarCp1Gm5pcWaYA8wszdibCZJi12L\",\n    \"QmXgx3XGqvoBkqqHySALMpLjF18D3x3CuAUo59gj8zq9Jj\",\n    \"QmaAEZgHrqe4WoU8wXqrh5o1HSrDcpuF5WMjPT4sqPSMi9\",\n    \"QmadySP1Yd1ZfH6qnwRBnNaveZCHPcSoWJeHNLAxmRimdr\",\n    \"Qmcy4rfHfTJXrreyTh4GRPSy5QF1ZJeJvNbqaWz9j35D91\",\n    \"QmRMTi7cihVmnaWUi1ZAoCGgV6eu1dbbjJJHvzjSaN7aFL\",\n    \"QmYG5QyZW4X5Fwfshx5bvhPtoyX9U3UTtv1dX2nZ7UX9EM\",\n    \"QmWfubRWwfUHHaWhMBy7rudnXTpxrofumqicoRR9UBAXsP\",\n    \"QmbSLq9uDT3TVAV3VgGpshmtZpYJ3NxsPm6oznJbxa57xq\",\n    \"QmXD6eQ4tNumqBE8PGFH9L8gibUTdYjL9v3SUrVHEtP6Xi\",\n    \"QmahhHkuncU6rsFMQ4pyQvjUUx3aDdQYFkcR4ukjcBPh56\",\n    \"QmaSTFAqucX8q4E9HHdtBErY68fNu8gVExoUbBbjKHLNmM\",\n    \"QmXD9jheYgvvKDXLZGYoqztJEVfrQ7yB6NSKaQKmESLo4p\",\n    \"QmYRRExRfc3g5tATrYPJ45aRn8JLJ6T8959YsvTPjjhEUr\",\n    \"QmUgBQdKb1oYupP2Fs4eXk6eTqQyQ9cLBEF5VTaAAfr2bC\",\n    \"QmXqvdJNK6a2n55UaJM6uvfyQeJLdev8DFP2nydjSTK1Qz\",\n    \"QmZtL97WEoHA2HKLSzZ74y9MfM9nmFWsiMqiRyweqL8ikX\",\n    \"QmZoLMUL3NS4PyBHFgzk1ruKA19dCcgWSX3F7ArGc6UB5b\",\n    \"Qman9DuHyA6j7TvUczGBm3NU2jxtd6j89bm7aXWspagjE8\",\n    \"QmeQcpRiMbYzapB4vAtH3tFt4PdEd6Zb7p7r1Y2M9KstQw\",\n    \"QmegvaBeMM4E4kV8Gqn2T9d6tqkz4RUF324PC2jNgAAVKV\",\n    \"QmbKPJxdj71acXfCjikvS9Qwfmyk6F1SVky4WPhSjD4gSz\",\n    \"QmRBEQFobbjiGxZ8GgU8oEz3DX9eNK69zEgmCNTWJcaR6H\",\n    \"QmWfN5kJJjhS4siKaqw7adr917RzvKE5Jj7YdY4DiFYYex\",\n    \"QmcuFTBN3U3q6su5GfRMixHu5tZ7Aa9eewyMYfNRENm2nA\",\n    \"QmanDiR24zLithSsVGdG3LPbt9GtLceMBiDRUt1L9HhqYK\",\n    \"QmR44Er25Qndn5wp9cfiracwpaeYroFVN1f2WijLz1dBen\",\n    \"QmdqdURNdR1ZkNsMnyDAaZHoZPW7hcNm8JnNXCGPC22ZWk\",\n    \"QmTPqrwL9m6f7nvnfDMH6wPRb3MSuERXgs94ZbxhCU1Hpj\",\n    \"QmY4yxLhkdkYQSJxBmNUf2zUYkmcd1qrcXHAXk4W4zDby8\",\n    \"QmTMR6khxB7TuHS5upKBWJaLvgEASpQ3t8Q4bNXTENMhuJ\",\n    \"QmQU3GTx9H1Bx38nkREoymtUfiM1DDnBZxEPvG3DhbZNPL\",\n    \"QmVNoG1R1mFHtdWNPpaPyrB6Uf2uDrCG8dNgqGjMoVNgQu\",\n    \"QmUnvS2iuaYjYJVr9VJyT4dk2eZdLuzuAbCY5DPhVpufo8\",\n    \"QmRNZAHKSXpm434iXGuECKVYUhBPrirztV78k89UrHKPQk\",\n    \"QmQnfwZLw9StHb4nC9tv5Rt7d3MYtztjiv2JAy6LUXASf3\",\n    \"QmWHTeGBBF5idg7LCGNPxnjz2WNMgtDo2zujCekP1cP3eV\",\n    \"QmenT8GeR2qyv5d5Q4jKYrQjvB17jVaDBmssEPA6Rs5wCT\",\n    \"QmakqNNpHuEaDMUunmVQQq59yxsVoyY9GCmky1wiP36chG\",\n    \"QmYopRbhZNbVTrYyrHVAopq6iPw9ukQ6VFmdEKAXqFh9yS\",\n    \"QmQqH415XTdJGgT9bJvM8or8ctmGoBXdvTK8FGjSxkjfsu\",\n    \"QmdHmytTx2vNynNL2hj6w8dnBu1L1igWt9tzHSDG4RkdpZ\",\n    \"QmZYTKWh9KM8VXYRB9rdZGkdrTgb5PQws9u1FxBU1xkzmW\",\n    \"QmQNFQEG6G9Qfo2uUpXbwUWiXrxRSEAi4mAepUgMW7YS42\",\n    \"QmdyBDFH8UFmt3xumPbtiw6LnULDXwf6ro6qRZEeAvrkqU\",\n    \"QmNq7JjMMFi6TmwRt2T6XWW9FyJ85eTJUTCmbjzQ8zsCaA\",\n    \"QmVUDDiVGwriTqFe9JWmGkTCQU1QyEro8tqUF7jN9tV2AR\",\n    \"QmUFLFEihCrg3Gnu8FPPiCtX9mxe9bbCrXejt5HoRLE97N\",\n    \"QmPKhVjtFBwtXCHa8qMVjKjXzi1xaBzRpgzJ1vcatD64pr\",\n    \"QmYMB67qxe8GRhdMbjG94Cu6rpuVfce1rkZMVKLwyEdDTZ\",\n    \"QmNXwh5AoKrCn9CDn84ebLBYTgFR1hhwpiXcgF59pcPbT4\",\n    \"QmexRs9zvX1RPCKYQeg8eHwFHS2U5qfsUiMvrJA95CNEyf\",\n    \"QmQxctpdWUViL3yf87T1KLp7GqSdv9QJ9FyyE6faRp5rey\",\n    \"QmPVSeLDX9egozeX5nZQR1QVAAoxSbzyq7WuRJ2gtJdngv\",\n    \"QmduBxnhv27mApKEkut8uhEZfBMRQnWmnE3nRQc8km4Vs1\",\n    \"QmadTxyDXootYpAGFkjZLNkEr7DmKvJ8boJwvgdycj8trb\"\n  ];\n}\n"
    },
    "src/PongComputeManager.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport {ComputeManagerSimple} from 'lib/protocol-core/contracts/samples/ComputeManagerSimple.sol';\n\n/**\n * An implementation of the Compute Manager for Pong.\n */\ncontract PongComputeManager is ComputeManagerSimple {\n    address public completer;\n    string internal constant MUST_BE_CALLED_BY_COMPLETER =\n        'Must be called by completer';\n\n    constructor(address computeRequestManager_, address completer_)\n        ComputeManagerSimple(computeRequestManager_)\n    {\n        completer = completer_;\n    }\n\n    modifier onlyCompleter() {\n        if (msg.sender != completer)\n            revert InvalidCaller(\n                MUST_BE_CALLED_BY_COMPLETER,\n                completer,\n                msg.sender\n            );\n        _;\n    }\n\n    /**\n     * Get the disbursement information for given compute option.\n     * @param index The given compute option index.\n     * @param amount The amount of ASTO to be distributed.\n     * @return addresses The addresses to distribute to.\n     * @return amounts The amount to distribute to each address.\n     * @dev The total amounts must be less or equal to the input amount.\n     * @dev This function must return even when a compute option is no longer valid.\n     */\n    function getComputeOptionDisbursement(uint256 index, uint256 amount)\n        public\n        view\n        override\n        validComputeIndex(index)\n        returns (address[] memory addresses, uint256[] memory amounts)\n    {\n        // Completer takes it all\n        addresses = new address[](1);\n        addresses[0] = completer;\n        amounts = new uint256[](1);\n        amounts[0] = amount;\n        return (addresses, amounts);\n    }\n\n    /**\n     * Complete a compute request.\n     * @param computeId The compute id to update.\n     * @notice Only callable by the completer.\n     */\n    function completeCompute(uint256 computeId)\n        external\n        override\n        onlyCompleter\n    {\n        return computeRequestManager.completeCompute(computeId);\n    }\n}\n"
    },
    "src/PongMemoryTree.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport {MemoryTreeEnumerable} from 'lib/protocol-core/contracts/samples/MemoryTreeEnumerable.sol';\n\nerror InvalidBrainAddress(address expected, address actual);\n\n/**\n * An implementation of the Memory Tree interface for Pong.\n * This implementation ensures only one brain address is used.\n */\ncontract PongMemoryTree is MemoryTreeEnumerable {\n    address private immutable BRAIN_ADDRESS;\n\n    constructor(address brainAddress) {\n        BRAIN_ADDRESS = brainAddress;\n    }\n\n    /**\n     * Add a root node to create a new memory tree for a given brain.\n     * @param brainAddress The address of the brain contract to run compute against.\n     * @param brainId The token id for the brain to run compute against.\n     * @param nodeHash A studio identifier for this node.\n     * @param storageURI The storage URI for the new node.\n     * @param signature Function parameters hashed and signed by the signer.\n     * @return treeId The new tree id.\n     * @return nodeId The new node id.\n     */\n    function addMemoryTree(\n        address brainAddress,\n        uint256 brainId,\n        bytes32 nodeHash,\n        string memory storageURI,\n        bytes calldata signature\n    ) public override returns (uint256 treeId, uint256 nodeId) {\n        if (brainAddress != BRAIN_ADDRESS)\n            revert InvalidBrainAddress(BRAIN_ADDRESS, brainAddress);\n        return\n            super.addMemoryTree(\n                brainAddress,\n                brainId,\n                nodeHash,\n                storageURI,\n                signature\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x0000000000000031363830303534343631333534"
      }
    }
  }
}
