{
  "address": "0x25c6A67Af961a329dEACBDD3d9b84D03B6e8D5d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brainAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ASTOPaymentFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        }
      ],
      "name": "AccessError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComputeInactive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComputeRequestClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ComputeRequestRevoked",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "slaTimestamp",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "currentTimestamp",
          "type": "uint64"
        }
      ],
      "name": "ComputeSLANotReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "availableAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "expected",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actual",
          "type": "address"
        }
      ],
      "name": "InvalidBrainAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "expectedCaller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "actualCaller",
          "type": "address"
        }
      ],
      "name": "InvalidCaller",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidComputeIndex",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "InvalidComputeRequest",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        }
      ],
      "name": "InvalidDisbursement",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        }
      ],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "InvalidRegistryIndex",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "errMsg",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "requiredAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "receivedAmount",
          "type": "uint256"
        }
      ],
      "name": "PaymentError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "brainAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "brainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nodeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nodeHash",
          "type": "bytes32"
        }
      ],
      "name": "MemoryNodeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brainAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "brainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "storageURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addMemoryTree",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nodeId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "parentNodeId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "nodeHash",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "storageURI",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "addNode",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nodeId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMemoryNode",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "memoryTreeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "children",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "storageURI",
              "type": "string"
            }
          ],
          "internalType": "struct IMemoryTree.MemoryNode",
          "name": "node",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getMemoryTreeDetails",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "brainAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "brainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "rootNodes",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IMemoryTree.MemoryTreeDetails",
          "name": "details",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSigner",
      "outputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        }
      ],
      "name": "memoryNodeIdsOfMemoryTree",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "treeId",
          "type": "uint256"
        }
      ],
      "name": "memoryNodesOfMemoryTree",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "memoryTreeId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "children",
              "type": "uint256[]"
            },
            {
              "internalType": "string",
              "name": "storageURI",
              "type": "string"
            }
          ],
          "internalType": "struct IMemoryTree.MemoryNode[]",
          "name": "treeNodes",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "brainAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "brainId",
          "type": "uint256"
        }
      ],
      "name": "memoryTreesOfBrain",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "indexes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "setSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffe429a99a1a5d165a4704dd52bcf0cc7d8a55ccb55cff20af5b6bdb4b847156",
  "receipt": {
    "to": null,
    "from": "0xeb24a849E6C908D4166D34D7E3133B452CB627D2",
    "contractAddress": "0x25c6A67Af961a329dEACBDD3d9b84D03B6e8D5d9",
    "transactionIndex": 84,
    "gasUsed": "1572438",
    "logsBloom": "0x
    "blockHash": "0xaffd614567e02deda07222b1209316dd48fe5bfb8b6f6499b49f21759dd37157",
    "transactionHash": "0xffe429a99a1a5d165a4704dd52bcf0cc7d8a55ccb55cff20af5b6bdb4b847156",
    "logs": [
      {
        "transactionIndex": 84,
        "blockNumber": 8730867,
        "transactionHash": "0xffe429a99a1a5d165a4704dd52bcf0cc7d8a55ccb55cff20af5b6bdb4b847156",
        "address": "0x25c6A67Af961a329dEACBDD3d9b84D03B6e8D5d9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000eb24a849e6c908d4166d34d7e3133b452cb627d2"
        ],
        "data": "0x",
        "logIndex": 124,
        "blockHash": "0xaffd614567e02deda07222b1209316dd48fe5bfb8b6f6499b49f21759dd37157"
      }
    ],
    "blockNumber": 8730867,
    "cumulativeGasUsed": "12615064",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x9D18387EbD51E46eBcf4B3b3eA1404B49351FAF4"],
  "numDeployments": 14,
  "solcInputHash": "62d642a65c015339619197723ee9f83e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brainAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ASTOPaymentFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"AccessError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComputeInactive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComputeRequestClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ComputeRequestRevoked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"slaTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"currentTimestamp\",\"type\":\"uint64\"}],\"name\":\"ComputeSLANotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"availableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"expected\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actual\",\"type\":\"address\"}],\"name\":\"InvalidBrainAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"expectedCaller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"actualCaller\",\"type\":\"address\"}],\"name\":\"InvalidCaller\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidComputeIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidComputeRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"InvalidDisbursement\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"}],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidRegistryIndex\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"errMsg\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"receivedAmount\",\"type\":\"uint256\"}],\"name\":\"PaymentError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"brainAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"brainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"}],\"name\":\"MemoryNodeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brainAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"brainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"storageURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addMemoryTree\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"parentNodeId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"nodeHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"storageURI\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"addNode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nodeId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemoryNode\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"memoryTreeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"children\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"storageURI\",\"type\":\"string\"}],\"internalType\":\"struct IMemoryTree.MemoryNode\",\"name\":\"node\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMemoryTreeDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"brainAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"brainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"rootNodes\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IMemoryTree.MemoryTreeDetails\",\"name\":\"details\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"}],\"name\":\"memoryNodeIdsOfMemoryTree\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treeId\",\"type\":\"uint256\"}],\"name\":\"memoryNodesOfMemoryTree\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"memoryTreeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"children\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"storageURI\",\"type\":\"string\"}],\"internalType\":\"struct IMemoryTree.MemoryNode[]\",\"name\":\"treeNodes\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"brainAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"brainId\",\"type\":\"uint256\"}],\"name\":\"memoryTreesOfBrain\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indexes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMemoryTree(address,uint256,bytes32,string,bytes)\":{\"params\":{\"brainAddress\":\"The address of the brain contract to run compute against.\",\"brainId\":\"The token id for the brain to run compute against.\",\"nodeHash\":\"A studio identifier for this node.\",\"signature\":\"Function parameters hashed and signed by the signer.\",\"storageURI\":\"The storage URI for the new node.\"},\"returns\":{\"nodeId\":\"The new node id.\",\"treeId\":\"The new tree id.\"}},\"addNode(uint256,bytes32,string,bytes)\":{\"params\":{\"nodeHash\":\"A studio identifier for this node.\",\"parentNodeId\":\"The parent node for the new node.\",\"signature\":\"Function parameters hashed and signed by the signer.\",\"storageURI\":\"The storage URI for the new node.\"},\"returns\":{\"nodeId\":\"The new node id.\"}},\"getMemoryNode(uint256)\":{\"params\":{\"index\":\"The index of the memory tree node to return.\"},\"returns\":{\"node\":\"The memory tree node.\"}},\"getMemoryTreeDetails(uint256)\":{\"params\":{\"index\":\"The index of the memory tree details to return.\"},\"returns\":{\"details\":\"The memory tree details.\"}},\"getSigner()\":{\"returns\":{\"signer\":\"The signing address.\"}},\"memoryNodeIdsOfMemoryTree(uint256)\":{\"details\":\"This function is expensive and should NOT be called in write functions.\",\"params\":{\"treeId\":\"The id for the memory to enumerate.\"},\"returns\":{\"indexes\":\"The indexes of memory tree nodes.\"}},\"memoryNodesOfMemoryTree(uint256)\":{\"details\":\"This function is expensive and should NOT be called in write functions.\",\"params\":{\"treeId\":\"The id for the memory to enumerate.\"},\"returns\":{\"treeNodes\":\"The memory tree nodes.\"}},\"memoryTreesOfBrain(address,uint256)\":{\"details\":\"This function is expensive and should NOT be called in write functions.\",\"params\":{\"brainAddress\":\"The address of the brain contract.\",\"brainId\":\"The token id for the brain.\"},\"returns\":{\"indexes\":\"The indexes of memory trees.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSigner(address)\":{\"params\":{\"signer\":\"The signing address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMemoryTree(address,uint256,bytes32,string,bytes)\":{\"notice\":\"Add a root node to create a new memory tree for a given brain.\"},\"addNode(uint256,bytes32,string,bytes)\":{\"notice\":\"Add a node to the memory tree for a given brain.\"},\"getMemoryNode(uint256)\":{\"notice\":\"Get memory tree node.\"},\"getMemoryTreeDetails(uint256)\":{\"notice\":\"Get memory tree details.\"},\"getSigner()\":{\"notice\":\"Returns the signer that validates requests.\"},\"memoryNodeIdsOfMemoryTree(uint256)\":{\"notice\":\"List all indexes of memory trees associated with the caller.\"},\"memoryNodesOfMemoryTree(uint256)\":{\"notice\":\"List all indexes of memory trees associated with the caller.\"},\"memoryTreesOfBrain(address,uint256)\":{\"notice\":\"List all indexes of memory trees associated with the brain.\"},\"setSigner(address)\":{\"notice\":\"Set the signer the validates requests.\"}},\"notice\":\"An implementation of the Memory Tree interface for Pong. This implementation ensures only one brain address is used.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/PongMemoryTree.sol\":\"PongMemoryTree\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x0000000000000031363739393739353132303233\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x00c839ff53d07d19db2e7cfa1e5133f9ee90a8d64b0e2e57f50446a2d1a3a0e0\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x41bbb2c41036ca64b2f6c9e973e8cfaa113ebc42af86702cd0d267f915a7e886\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x2626d8ab3dfdad0fad630c212ad146d59473d0f48b771784c61a7c1dbbea1f3f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x54ee424bfc83ce63b2a918b9a1efb5090a0fb68dbd1de3b10bc667776885dd4f\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3546b156d97633f7f8cad536d5454c81d1d604687c02b2eb105fdc33cb962b41\",\"license\":\"MIT\"},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"lib/protocol-core/contracts/helpers/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev ASM Protocol - Errors\\n */\\ncontract Errors {\\n    error InvalidInput(string errMsg);\\n    string constant INVALID_MULTISIG = \\\"Invalid Multisig contract\\\";\\n    string constant INVALID_MANAGER = \\\"Invalid Manager contract\\\";\\n    string constant INVALID_ADDRESS = \\\"Invalid wallet address\\\";\\n    string constant INVALID_AMOUNT = \\\"Invalid amount\\\";\\n\\n    error AccessError(string errMsg);\\n    string internal constant WRONG_TOKEN_ID = \\\"Wrong token ID\\\";\\n    string internal constant WRONG_TOKEN_OWNER = \\\"Wrong token owner\\\";\\n    string internal constant WRONG_HASH = \\\"Wrong hash\\\";\\n    string internal constant NOT_ASSIGNED = \\\"Address not assigned\\\";\\n\\n    error PaymentError(string errMsg, uint256 requiredAmount, uint256 receivedAmount);\\n    string internal constant INSUFFICIENT_BALANCE = \\\"Insufficient balance\\\";\\n    string internal constant NO_PAYMENT_RECEIVED = \\\"No payment received\\\";\\n    string internal constant NO_PAYMENT_RECOGNIZED = \\\"MintType/Currency not recognized\\\";\\n    string internal constant CURRENCY_DOES_NOT_SUIT_TYPE = \\\"Currency doesn't suit type\\\";\\n    string internal constant MINT_TYPE_IS_NOT_SUPPORTED = \\\"MintType isn't supported\\\";\\n\\n    error InvalidCaller(string errMsg, address expectedCaller, address actualCaller);\\n    string internal constant MUST_BE_CALLED_BY_COMPUTE_CUSTODIAN = \\\"Must be called by custodian\\\";\\n    string internal constant MUST_BE_CALLED_BY_OWNER = \\\"Must be called by owner\\\";\\n    string internal constant MUST_BE_CALLED_BY_REQUESTER = \\\"Must be called by requester\\\";\\n    string internal constant MUST_BE_CALLED_BY_DAO = \\\"Must be called by DAO\\\";\\n    string internal constant WRONG_REQUESTER = \\\"Wrong requester address\\\";\\n\\n    error ASTOPaymentFailed(uint256 amount);\\n\\n    // Compute Manager\\n\\n    error InvalidComputeIndex();\\n    error ComputeInactive();\\n\\n    // Compute Request Manager\\n\\n    error InvalidComputeRequest(string errMsg, uint256 value);\\n    string internal constant INVALID_COMPUTE_UNITS = \\\"Invalid compute units\\\";\\n\\n    error ComputeRequestClosed();\\n    error ComputeRequestRevoked();\\n\\n    error ComputeSLANotReached(uint64 slaTimestamp, uint64 currentTimestamp);\\n\\n    error InvalidDisbursement(string errMsg);\\n    string internal constant INVALID_ARRAY_LENGTHS = \\\"Invalid array lengths\\\";\\n    string internal constant INVALID_TOTAL_AMOUNT = \\\"Invalid total amount\\\";\\n\\n    error InsufficientBalance(string errMsg, uint256 availableAmount, uint256 requestedAmount);\\n    string internal constant INSUFFICIENT_UNLOCKED_ASTO = \\\"Insufficient unlocked ASTO\\\";\\n    string internal constant INSUFFICIENT_COMPUTE_CUSTODIAN_ASTO = \\\"Insufficient Compute Manager ASTO\\\";\\n\\n    // Memory Tree\\n\\n    error InvalidSignature();\\n\\n    // Asset Stats Registry\\n\\n    error InvalidRegistryIndex(uint256 index);\\n}\\n\",\"keccak256\":\"0x56e214f1cceefe2ba3ff93c39abbf8a56196adcbb1b60a59e42d35cc9376ef21\",\"license\":\"MIT\"},\"lib/protocol-core/contracts/interfaces/IMemoryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\ninterface IMemoryTree {\\n    struct MemoryTreeDetails {\\n        address brainAddress;\\n        uint256 brainId;\\n        uint256[] rootNodes;\\n    }\\n    struct MemoryNode {\\n        uint256 memoryTreeId;\\n        uint256[] children;\\n        string storageURI;\\n    }\\n\\n    event MemoryNodeAdded(address brainAddress, uint256 brainId, uint256 nodeId, bytes32 nodeHash);\\n\\n    /**\\n     * Add a root node to create a new memory tree for a given brain.\\n     * @param brainAddress The address of the brain contract.\\n     * @param brainId The token id for the brain.\\n     * @param nodeHash A compute manager identifier for this node.\\n     * @param storageURI The storage URI for the new node.\\n     * @param signature Function parameters hashed and signed by the signer.\\n     * @return treeId The new tree id.\\n     * @return nodeId The new node id.\\n     */\\n    function addMemoryTree(\\n        address brainAddress,\\n        uint256 brainId,\\n        bytes32 nodeHash,\\n        string memory storageURI,\\n        bytes calldata signature\\n    ) external returns (uint256 treeId, uint256 nodeId);\\n\\n    /**\\n     * Add a node to the memory tree for a given brain.\\n     * @param parentNodeId The parent node for the new node.\\n     * @param nodeHash A compute manager identifier for this node.\\n     * @param storageURI The storage URI for the new node.\\n     * @param signature Function parameters hashed and signed by the signer.\\n     * @return nodeId The new node id.\\n     */\\n    function addNode(\\n        uint256 parentNodeId,\\n        bytes32 nodeHash,\\n        string memory storageURI,\\n        bytes calldata signature\\n    ) external returns (uint256 nodeId);\\n\\n    /**\\n     * Returns the signer that validates requests.\\n     * @return signer The signing address.\\n     */\\n    function getSigner() external returns (address signer);\\n\\n    /**\\n     * Get memory tree details.\\n     * @param index The index of the memory tree details to return.\\n     * @return details The memory tree details.\\n     */\\n    function getMemoryTreeDetails(uint256 index) external view returns (MemoryTreeDetails memory details);\\n\\n    /**\\n     * Get memory tree node.\\n     * @param index The index of the memory tree node to return.\\n     * @return node The memory tree node.\\n     */\\n    function getMemoryNode(uint256 index) external view returns (MemoryNode memory node);\\n\\n    function supportsInterface(bytes4 interfaceId) external returns (bool);\\n}\\n\",\"keccak256\":\"0x319aececbe4d21335ff5ba6c02aae7be0208c80a0e0edf2342038cea2f5747ee\",\"license\":\"MIT\"},\"lib/protocol-core/contracts/samples/MemoryTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IMemoryTree.sol\\\";\\nimport \\\"../helpers/Errors.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * Memory Tree.\\n */\\ncontract MemoryTree is IMemoryTree, ERC165, Errors, Ownable {\\n    using ECDSA for bytes32;\\n\\n    address private _signer;\\n\\n    uint256 internal totalTrees;\\n    uint256 internal totalNodes;\\n    mapping(uint256 => MemoryTreeDetails) internal trees;\\n    mapping(uint256 => MemoryNode) internal nodes;\\n\\n    constructor() {\\n        _signer = msg.sender;\\n    }\\n\\n    /**\\n     * Checks if the signature matches data signed by the signer.\\n     * @param data The data to sign.\\n     * @param signature The expected signed data.\\n     * @dev Reverts if the signature is invalid.\\n     */\\n    modifier signed(bytes memory data, bytes memory signature) {\\n        address dataSigner = keccak256(data).toEthSignedMessageHash().recover(signature);\\n        if (dataSigner != _signer) revert InvalidSignature();\\n        _;\\n    }\\n\\n    /**\\n     * Add a root node to create a new memory tree for a given brain.\\n     * @param brainAddress The address of the brain contract to run compute against.\\n     * @param brainId The token id for the brain to run compute against.\\n     * @param nodeHash A studio identifier for this node.\\n     * @param storageURI The storage URI for the new node.\\n     * @param signature Function parameters hashed and signed by the signer.\\n     * @return treeId The new tree id.\\n     * @return nodeId The new node id.\\n     */\\n    function addMemoryTree(\\n        address brainAddress,\\n        uint256 brainId,\\n        bytes32 nodeHash,\\n        string memory storageURI,\\n        bytes calldata signature\\n    )\\n        public\\n        virtual\\n        signed(abi.encodePacked(brainAddress, brainId, nodeHash, storageURI), signature)\\n        returns (uint256 treeId, uint256 nodeId)\\n    {\\n        // Check owner\\n        _ensureCallerIsOwner(brainAddress, brainId);\\n\\n        // Add memory tree details\\n        uint256[] memory n = new uint256[](1);\\n        trees[totalTrees] = MemoryTreeDetails(brainAddress, brainId, n);\\n\\n        // Add memory node\\n        nodeId = createNewNode(totalTrees, storageURI);\\n        emit MemoryNodeAdded(brainAddress, brainId, nodeId, nodeHash);\\n        trees[totalTrees].rootNodes[0] = nodeId;\\n\\n        return (totalTrees++, nodeId);\\n    }\\n\\n    /**\\n     * Add a node to the memory tree for a given brain.\\n     * @param parentNodeId The parent node for the new node.\\n     * @param nodeHash A studio identifier for this node.\\n     * @param storageURI The storage URI for the new node.\\n     * @param signature Function parameters hashed and signed by the signer.\\n     * @return nodeId The new node id.\\n     */\\n    function addNode(\\n        uint256 parentNodeId,\\n        bytes32 nodeHash,\\n        string memory storageURI,\\n        bytes calldata signature\\n    ) public virtual signed(abi.encodePacked(parentNodeId, nodeHash, storageURI), signature) returns (uint256 nodeId) {\\n        // Check owner\\n        MemoryNode storage parent = nodes[parentNodeId];\\n        MemoryTreeDetails storage tree = trees[parent.memoryTreeId];\\n        _ensureCallerIsOwner(tree.brainAddress, tree.brainId);\\n\\n        nodeId = createNewNode(parent.memoryTreeId, storageURI);\\n        emit MemoryNodeAdded(tree.brainAddress, tree.brainId, nodeId, nodeHash);\\n        parent.children.push(nodeId);\\n        return nodeId;\\n    }\\n\\n    /**\\n     * Creates a new node with the given storageURI.\\n     * @param memoryTreeId The id of the memory tree.\\n     * @param storageURI The storage URI.\\n     * @return nodeId The new memory nodes id.\\n     */\\n    function createNewNode(uint256 memoryTreeId, string memory storageURI) private returns (uint256 nodeId) {\\n        nodeId = totalNodes;\\n        nodes[nodeId] = MemoryNode(memoryTreeId, new uint256[](0), storageURI);\\n        ++totalNodes;\\n        return nodeId;\\n    }\\n\\n    //\\n    // Admin\\n    //\\n\\n    /**\\n     * Set the signer the validates requests.\\n     * @param signer The signing address.\\n     */\\n    function setSigner(address signer) external onlyOwner {\\n        _signer = signer;\\n    }\\n\\n    //\\n    // Views\\n    //\\n\\n    /**\\n     * Ensures the owner is the sender.\\n     * @param brainAddress The address of the brain contract.\\n     * @param brainId The token id to check.\\n     * @dev Reverts if the caller is not the owner.\\n     */\\n    function _ensureCallerIsOwner(address brainAddress, uint256 brainId) private view {\\n        address brainOwner = IERC721(brainAddress).ownerOf(brainId);\\n        if (msg.sender != brainOwner) revert InvalidCaller(MUST_BE_CALLED_BY_OWNER, brainOwner, msg.sender);\\n    }\\n\\n    /**\\n     * Returns the signer that validates requests.\\n     * @return signer The signing address.\\n     */\\n    function getSigner() external view returns (address signer) {\\n        return _signer;\\n    }\\n\\n    /**\\n     * Get memory tree details.\\n     * @param index The index of the memory tree details to return.\\n     * @return details The memory tree details.\\n     */\\n    function getMemoryTreeDetails(uint256 index) external view returns (MemoryTreeDetails memory details) {\\n        return trees[index];\\n    }\\n\\n    /**\\n     * Get memory tree node.\\n     * @param index The index of the memory tree node to return.\\n     * @return node The memory tree node.\\n     */\\n    function getMemoryNode(uint256 index) external view returns (MemoryNode memory node) {\\n        return nodes[index];\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IMemoryTree, ERC165) returns (bool) {\\n        return interfaceId == type(IMemoryTree).interfaceId || ERC165.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xbc30c697ba68ff143642d777ba5876ba4737f5f10e6a6eb46f5dc548ee9e930a\",\"license\":\"MIT\"},\"lib/protocol-core/contracts/samples/MemoryTreeEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./MemoryTree.sol\\\";\\n\\n/**\\n * Memory Tree with enumerable functions.\\n */\\ncontract MemoryTreeEnumerable is MemoryTree {\\n    /**\\n     * List all indexes of memory trees associated with the brain.\\n     * @param brainAddress The address of the brain contract.\\n     * @param brainId The token id for the brain.\\n     * @return indexes The indexes of memory trees.\\n     * @dev This function is expensive and should NOT be called in write functions.\\n     */\\n    function memoryTreesOfBrain(address brainAddress, uint256 brainId)\\n        external\\n        view\\n        returns (uint256[] memory indexes)\\n    {\\n        indexes = new uint256[](totalTrees);\\n        uint256 treesAdded;\\n\\n        for (uint256 i; i < totalTrees; i++) {\\n            MemoryTreeDetails memory details = trees[i];\\n            if (details.brainAddress == brainAddress && details.brainId == brainId) {\\n                indexes[treesAdded] = i;\\n                ++treesAdded;\\n            }\\n        }\\n\\n        // Resize array\\n        assembly {\\n            mstore(indexes, treesAdded)\\n        }\\n        return indexes;\\n    }\\n\\n    /**\\n     * List all indexes of memory trees associated with the caller.\\n     * @param treeId The id for the memory to enumerate.\\n     * @return indexes The indexes of memory tree nodes.\\n     * @dev This function is expensive and should NOT be called in write functions.\\n     */\\n    function memoryNodeIdsOfMemoryTree(uint256 treeId) public view returns (uint256[] memory indexes) {\\n        indexes = new uint256[](totalNodes);\\n        uint256 nodesAdded;\\n\\n        // Add all roots\\n        uint256[] memory roots = trees[treeId].rootNodes;\\n        for (uint256 i; i < roots.length; i++) {\\n            indexes[nodesAdded] = roots[i];\\n            ++nodesAdded;\\n        }\\n        // Iterate nodes for children\\n        // Added children will be iterated on as well\\n        for (uint256 i; i < nodesAdded; i++) {\\n            MemoryNode storage node = nodes[indexes[i]];\\n            uint256[] memory children = node.children;\\n            for (uint256 j; j < children.length; j++) {\\n                indexes[nodesAdded] = children[j];\\n                ++nodesAdded;\\n            }\\n        }\\n\\n        // Resize array\\n        assembly {\\n            mstore(indexes, nodesAdded)\\n        }\\n        return indexes;\\n    }\\n\\n    /**\\n     * List all indexes of memory trees associated with the caller.\\n     * @param treeId The id for the memory to enumerate.\\n     * @return treeNodes The memory tree nodes.\\n     * @dev This function is expensive and should NOT be called in write functions.\\n     */\\n    function memoryNodesOfMemoryTree(uint256 treeId) external view returns (MemoryNode[] memory treeNodes) {\\n        uint256[] memory indexes = memoryNodeIdsOfMemoryTree(treeId);\\n        treeNodes = new MemoryNode[](indexes.length);\\n\\n        for (uint256 i; i < indexes.length; i++) {\\n            treeNodes[i] = nodes[indexes[i]];\\n        }\\n\\n        return treeNodes;\\n    }\\n}\\n\",\"keccak256\":\"0x22f3f3ea6f8892d73f21467e5b96b48d01c9cee8edc1548951a728a98f414e4d\",\"license\":\"MIT\"},\"src/PongMemoryTree.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {MemoryTreeEnumerable} from 'lib/protocol-core/contracts/samples/MemoryTreeEnumerable.sol';\\n\\nerror InvalidBrainAddress(address expected, address actual);\\n\\n/**\\n * An implementation of the Memory Tree interface for Pong.\\n * This implementation ensures only one brain address is used.\\n */\\ncontract PongMemoryTree is MemoryTreeEnumerable {\\n    address private immutable BRAIN_ADDRESS;\\n\\n    constructor(address brainAddress) {\\n        BRAIN_ADDRESS = brainAddress;\\n    }\\n\\n    /**\\n     * Add a root node to create a new memory tree for a given brain.\\n     * @param brainAddress The address of the brain contract to run compute against.\\n     * @param brainId The token id for the brain to run compute against.\\n     * @param nodeHash A studio identifier for this node.\\n     * @param storageURI The storage URI for the new node.\\n     * @param signature Function parameters hashed and signed by the signer.\\n     * @return treeId The new tree id.\\n     * @return nodeId The new node id.\\n     */\\n    function addMemoryTree(\\n        address brainAddress,\\n        uint256 brainId,\\n        bytes32 nodeHash,\\n        string memory storageURI,\\n        bytes calldata signature\\n    ) public override returns (uint256 treeId, uint256 nodeId) {\\n        if (brainAddress != BRAIN_ADDRESS)\\n            revert InvalidBrainAddress(BRAIN_ADDRESS, brainAddress);\\n        return\\n            super.addMemoryTree(\\n                brainAddress,\\n                brainId,\\n                nodeHash,\\n                storageURI,\\n                signature\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x9c352ba4a4f6f8de9caf8e163a5a4f44e43738aba5a4b5d5355dfd0b4ada4b1f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162001b9738038062001b97833981016040819052610031916100ad565b61003a3361005d565b600180546001600160a01b031916331790556001600160a01b03166080526100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b608051611a9762000100600039600081816104c201526105100152611a976000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063d963581611610066578063d9635816146101d8578063dc5c4dca146101eb578063ebd7c1681461020b578063f2fde38b1461022b57600080fd5b80638da5cb5b1461017f578063910f031c1461019057806399816c4c146101b857600080fd5b806301ffc9a7146100d4578063445efb59146100fc5780636c19e7831461011d5780636f82ba2714610132578063715018a6146101525780637ac3c02f1461015a575b600080fd5b6100e76100e23660046113a4565b61023e565b60405190151581526020015b60405180910390f35b61010f61010a3660046114ba565b610275565b6040519081526020016100f3565b61013061012b36600461154d565b6103dd565b005b61014561014036600461156a565b610407565b6040516100f391906115be565b6101306104a9565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f3565b6000546001600160a01b0316610167565b6101a361019e3660046115fd565b6104bd565b604080519283526020830191909152016100f3565b6101cb6101c636600461168d565b610567565b6040516100f391906116b9565b6101cb6101e636600461156a565b6106b5565b6101fe6101f936600461156a565b6108d2565b6040516100f3919061178e565b61021e61021936600461156a565b610ac1565b6040516100f391906117f0565b61013061023936600461154d565b610bea565b60006001600160e01b0319821663151c454160e11b148061026f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600085858560405160200161028c93929190611803565b60408051601f198184030181526020601f8601819004810284018101909252848352919085908590819084018382808284376000920182905250855160208701209093506102e792508491506102e190610c63565b90610cb6565b6001549091506001600160a01b0380831691161461031857604051638baa579f60e01b815260040160405180910390fd5b60008981526005602090815260408083208054845260049092529091208054600182015461034f916001600160a01b031690610cda565b815461035b908a610dad565b81546001830154604080516001600160a01b03909316835260208301919091528101829052606081018c90529096507f7b06466216d59eef8c3e9af46549eecf860e594162c5c7f7cc96995beea938a79060800160405180910390a1506001908101805491820181556000908152602090200184905550505095945050505050565b6103e5610e2f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051606080820183526000808352602080840182905283850183905285825260048152908490208451928301855280546001600160a01b03168352600181015483830152600281018054865181850281018501885281815295969495929486019383018282801561049957602002820191906000526020600020905b815481526020019060010190808311610485575b5050505050815250509050919050565b6104b1610e2f565b6104bb6000610e89565b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03161461054a57604051635ffe91d360e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152891660248201526044015b60405180910390fd5b610558888888888888610ed9565b91509150965096945050505050565b606060025467ffffffffffffffff811115610584576105846113d5565b6040519080825280602002602001820160405280156105ad578160200160208202803683370190505b5090506000805b6002548110156106ac576000818152600460209081526040808320815160608101835281546001600160a01b0316815260018201548185015260028201805484518187028101870186528181529295939486019383018282801561063757602002820191906000526020600020905b815481526020019060010190808311610623575b5050505050815250509050856001600160a01b031681600001516001600160a01b031614801561066a5750848160200151145b15610699578184848151811061068257610682611830565b602090810291909101015261069683611846565b92505b50806106a481611846565b9150506105b4565b50815292915050565b606060035467ffffffffffffffff8111156106d2576106d26113d5565b6040519080825280602002602001820160405280156106fb578160200160208202803683370190505b506000838152600460209081526040808320600201805482518185028101850190935280835294955092938493919283018282801561075957602002820191906000526020600020905b815481526020019060010190808311610745575b5050505050905060005b81518110156107c05781818151811061077e5761077e611830565b602002602001015184848151811061079857610798611830565b60209081029190910101526107ac83611846565b9250806107b881611846565b915050610763565b5060005b828110156108c9576000600560008684815181106107e4576107e4611830565b60200260200101518152602001908152602001600020905060008160010180548060200260200160405190810160405280929190818152602001828054801561084c57602002820191906000526020600020905b815481526020019060010190808311610838575b5050505050905060005b81518110156108b35781818151811061087157610871611830565b602002602001015187878151811061088b5761088b611830565b602090810291909101015261089f86611846565b9550806108ab81611846565b915050610856565b50505080806108c190611846565b9150506107c4565b50508152919050565b606060006108df836106b5565b9050805167ffffffffffffffff8111156108fb576108fb6113d5565b60405190808252806020026020018201604052801561095057816020015b61093d60405180606001604052806000815260200160608152602001606081525090565b8152602001906001900390816109195790505b50915060005b8151811015610aba576005600083838151811061097557610975611830565b6020026020010151815260200190815260200160002060405180606001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156109ef57602002820191906000526020600020905b8154815260200190600101908083116109db575b50505050508152602001600282018054610a089061186d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a349061186d565b8015610a815780601f10610a5657610100808354040283529160200191610a81565b820191906000526020600020905b815481529060010190602001808311610a6457829003601f168201915b505050505081525050838281518110610a9c57610a9c611830565b60200260200101819052508080610ab290611846565b915050610956565b5050919050565b610ae560405180606001604052806000815260200160608152602001606081525090565b60008281526005602090815260409182902082516060810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015610b5157602002820191906000526020600020905b815481526020019060010190808311610b3d575b50505050508152602001600282018054610b6a9061186d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061186d565b80156104995780601f10610bb857610100808354040283529160200191610499565b820191906000526020600020905b815481529060010190602001808311610bc657505050919092525091949350505050565b610bf2610e2f565b6001600160a01b038116610c575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610541565b610c6081610e89565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000806000610cc585856110f1565b91509150610cd281611136565b509392505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e90602401602060405180830381865afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906118a7565b9050336001600160a01b03821614610da857604080518082018252601781527f4d7573742062652063616c6c6564206279206f776e65720000000000000000006020820152905163b4f0c18560e01b81526105419190839033906004016118c4565b505050565b60035460408051606081018252848152815160008082526020808301855280840192835283850187905285825260058152939020825181559051805192939192610dfd9260018501920190611344565b5060408201516002820190610e129082611945565b50905050600360008154610e2590611846565b9091555092915050565b6000546001600160a01b031633146104bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008087878787604051602001610ef39493929190611a05565b60408051601f198184030181526020601f870181900481028401810190925285835291908690869081908401838280828437600092018290525085516020870120909350610f4892508491506102e190610c63565b6001549091506001600160a01b03808316911614610f7957604051638baa579f60e01b815260040160405180910390fd5b610f838b8b610cda565b6040805160018082528183019092526000916020808301908036833701905050905060405180606001604052808d6001600160a01b031681526020018c81526020018281525060046000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002019080519060200190611031929190611344565b509050506110416002548a610dad565b604080516001600160a01b038f168152602081018e9052908101829052606081018c90529095507f7b06466216d59eef8c3e9af46549eecf860e594162c5c7f7cc96995beea938a79060800160405180910390a1846004600060025481526020019081526020016000206002016000815481106110c0576110c0611830565b600091825260208220019190915560028054916110dc83611846565b91905055955050505050965096945050505050565b60008082516041036111275760208301516040840151606085015160001a61111b87828585611280565b9450945050505061112f565b506000905060025b9250929050565b600081600481111561114a5761114a611a4b565b036111525750565b600181600481111561116657611166611a4b565b036111b35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610541565b60028160048111156111c7576111c7611a4b565b036112145760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610541565b600381600481111561122857611228611a4b565b03610c605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610541565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112b7575060009050600361133b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561130b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113345760006001925092505061133b565b9150600090505b94509492505050565b82805482825590600052602060002090810192821561137f579160200282015b8281111561137f578251825591602001919060010190611364565b5061138b92915061138f565b5090565b5b8082111561138b5760008155600101611390565b6000602082840312156113b657600080fd5b81356001600160e01b0319811681146113ce57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126113fc57600080fd5b813567ffffffffffffffff80821115611417576114176113d5565b604051601f8301601f19908116603f0116810190828211818310171561143f5761143f6113d5565b8160405283815286602085880101111561145857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261148a57600080fd5b50813567ffffffffffffffff8111156114a257600080fd5b60208301915083602082850101111561112f57600080fd5b6000806000806000608086880312156114d257600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156114f857600080fd5b61150489838a016113eb565b9450606088013591508082111561151a57600080fd5b5061152788828901611478565b969995985093965092949392505050565b6001600160a01b0381168114610c6057600080fd5b60006020828403121561155f57600080fd5b81356113ce81611538565b60006020828403121561157c57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156115b357815187529582019590820190600101611597565b509495945050505050565b6020815260018060a01b03825116602082015260208201516040820152600060408301516060808401526115f56080840182611583565b949350505050565b60008060008060008060a0878903121561161657600080fd5b863561162181611538565b95506020870135945060408701359350606087013567ffffffffffffffff8082111561164c57600080fd5b6116588a838b016113eb565b9450608089013591508082111561166e57600080fd5b5061167b89828a01611478565b979a9699509497509295939492505050565b600080604083850312156116a057600080fd5b82356116ab81611538565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156116f1578351835292840192918401916001016116d5565b50909695505050505050565b60005b83811015611718578181015183820152602001611700565b50506000910152565b600081518084526117398160208601602086016116fd565b601f01601f19169290920160200192915050565b80518252600060208201516060602085015261176c6060850182611583565b9050604083015184820360408601526117858282611721565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156117e357603f198886030184526117d185835161174d565b945092850192908501906001016117b5565b5092979650505050505050565b6020815260006113ce602083018461174d565b838152826020820152600082516118218160408501602087016116fd565b91909101604001949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161186657634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061188157607f821691505b6020821081036118a157634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156118b957600080fd5b81516113ce81611538565b6060815260006118d76060830186611721565b6001600160a01b0394851660208401529290931660409091015292915050565b601f821115610da857600081815260208120601f850160051c8101602086101561191e5750805b601f850160051c820191505b8181101561193d5782815560010161192a565b505050505050565b815167ffffffffffffffff81111561195f5761195f6113d5565b6119738161196d845461186d565b846118f7565b602080601f8311600181146119a857600084156119905750858301515b600019600386901b1c1916600185901b17855561193d565b600085815260208120601f198616915b828110156119d7578886015182559484019460019091019084016119b8565b50858210156119f55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6bffffffffffffffffffffffff198560601b16815283601482015282603482015260008251611a3b8160548501602087016116fd565b9190910160540195945050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f8758794f3fda460da73d258f4446155e006859bf3b0fb4aa95b5a18412c8f2964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80638da5cb5b1161008c578063d963581611610066578063d9635816146101d8578063dc5c4dca146101eb578063ebd7c1681461020b578063f2fde38b1461022b57600080fd5b80638da5cb5b1461017f578063910f031c1461019057806399816c4c146101b857600080fd5b806301ffc9a7146100d4578063445efb59146100fc5780636c19e7831461011d5780636f82ba2714610132578063715018a6146101525780637ac3c02f1461015a575b600080fd5b6100e76100e23660046113a4565b61023e565b60405190151581526020015b60405180910390f35b61010f61010a3660046114ba565b610275565b6040519081526020016100f3565b61013061012b36600461154d565b6103dd565b005b61014561014036600461156a565b610407565b6040516100f391906115be565b6101306104a9565b6001546001600160a01b03165b6040516001600160a01b0390911681526020016100f3565b6000546001600160a01b0316610167565b6101a361019e3660046115fd565b6104bd565b604080519283526020830191909152016100f3565b6101cb6101c636600461168d565b610567565b6040516100f391906116b9565b6101cb6101e636600461156a565b6106b5565b6101fe6101f936600461156a565b6108d2565b6040516100f3919061178e565b61021e61021936600461156a565b610ac1565b6040516100f391906117f0565b61013061023936600461154d565b610bea565b60006001600160e01b0319821663151c454160e11b148061026f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600085858560405160200161028c93929190611803565b60408051601f198184030181526020601f8601819004810284018101909252848352919085908590819084018382808284376000920182905250855160208701209093506102e792508491506102e190610c63565b90610cb6565b6001549091506001600160a01b0380831691161461031857604051638baa579f60e01b815260040160405180910390fd5b60008981526005602090815260408083208054845260049092529091208054600182015461034f916001600160a01b031690610cda565b815461035b908a610dad565b81546001830154604080516001600160a01b03909316835260208301919091528101829052606081018c90529096507f7b06466216d59eef8c3e9af46549eecf860e594162c5c7f7cc96995beea938a79060800160405180910390a1506001908101805491820181556000908152602090200184905550505095945050505050565b6103e5610e2f565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60408051606080820183526000808352602080840182905283850183905285825260048152908490208451928301855280546001600160a01b03168352600181015483830152600281018054865181850281018501885281815295969495929486019383018282801561049957602002820191906000526020600020905b815481526020019060010190808311610485575b5050505050815250509050919050565b6104b1610e2f565b6104bb6000610e89565b565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316886001600160a01b03161461054a57604051635ffe91d360e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152891660248201526044015b60405180910390fd5b610558888888888888610ed9565b91509150965096945050505050565b606060025467ffffffffffffffff811115610584576105846113d5565b6040519080825280602002602001820160405280156105ad578160200160208202803683370190505b5090506000805b6002548110156106ac576000818152600460209081526040808320815160608101835281546001600160a01b0316815260018201548185015260028201805484518187028101870186528181529295939486019383018282801561063757602002820191906000526020600020905b815481526020019060010190808311610623575b5050505050815250509050856001600160a01b031681600001516001600160a01b031614801561066a5750848160200151145b15610699578184848151811061068257610682611830565b602090810291909101015261069683611846565b92505b50806106a481611846565b9150506105b4565b50815292915050565b606060035467ffffffffffffffff8111156106d2576106d26113d5565b6040519080825280602002602001820160405280156106fb578160200160208202803683370190505b506000838152600460209081526040808320600201805482518185028101850190935280835294955092938493919283018282801561075957602002820191906000526020600020905b815481526020019060010190808311610745575b5050505050905060005b81518110156107c05781818151811061077e5761077e611830565b602002602001015184848151811061079857610798611830565b60209081029190910101526107ac83611846565b9250806107b881611846565b915050610763565b5060005b828110156108c9576000600560008684815181106107e4576107e4611830565b60200260200101518152602001908152602001600020905060008160010180548060200260200160405190810160405280929190818152602001828054801561084c57602002820191906000526020600020905b815481526020019060010190808311610838575b5050505050905060005b81518110156108b35781818151811061087157610871611830565b602002602001015187878151811061088b5761088b611830565b602090810291909101015261089f86611846565b9550806108ab81611846565b915050610856565b50505080806108c190611846565b9150506107c4565b50508152919050565b606060006108df836106b5565b9050805167ffffffffffffffff8111156108fb576108fb6113d5565b60405190808252806020026020018201604052801561095057816020015b61093d60405180606001604052806000815260200160608152602001606081525090565b8152602001906001900390816109195790505b50915060005b8151811015610aba576005600083838151811061097557610975611830565b6020026020010151815260200190815260200160002060405180606001604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156109ef57602002820191906000526020600020905b8154815260200190600101908083116109db575b50505050508152602001600282018054610a089061186d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a349061186d565b8015610a815780601f10610a5657610100808354040283529160200191610a81565b820191906000526020600020905b815481529060010190602001808311610a6457829003601f168201915b505050505081525050838281518110610a9c57610a9c611830565b60200260200101819052508080610ab290611846565b915050610956565b5050919050565b610ae560405180606001604052806000815260200160608152602001606081525090565b60008281526005602090815260409182902082516060810184528154815260018201805485518186028101860190965280865291949293858101939290830182828015610b5157602002820191906000526020600020905b815481526020019060010190808311610b3d575b50505050508152602001600282018054610b6a9061186d565b80601f0160208091040260200160405190810160405280929190818152602001828054610b969061186d565b80156104995780601f10610bb857610100808354040283529160200191610499565b820191906000526020600020905b815481529060010190602001808311610bc657505050919092525091949350505050565b610bf2610e2f565b6001600160a01b038116610c575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610541565b610c6081610e89565b50565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6000806000610cc585856110f1565b91509150610cd281611136565b509392505050565b6040516331a9108f60e11b8152600481018290526000906001600160a01b03841690636352211e90602401602060405180830381865afa158015610d22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4691906118a7565b9050336001600160a01b03821614610da857604080518082018252601781527f4d7573742062652063616c6c6564206279206f776e65720000000000000000006020820152905163b4f0c18560e01b81526105419190839033906004016118c4565b505050565b60035460408051606081018252848152815160008082526020808301855280840192835283850187905285825260058152939020825181559051805192939192610dfd9260018501920190611344565b5060408201516002820190610e129082611945565b50905050600360008154610e2590611846565b9091555092915050565b6000546001600160a01b031633146104bb5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610541565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008087878787604051602001610ef39493929190611a05565b60408051601f198184030181526020601f870181900481028401810190925285835291908690869081908401838280828437600092018290525085516020870120909350610f4892508491506102e190610c63565b6001549091506001600160a01b03808316911614610f7957604051638baa579f60e01b815260040160405180910390fd5b610f838b8b610cda565b6040805160018082528183019092526000916020808301908036833701905050905060405180606001604052808d6001600160a01b031681526020018c81526020018281525060046000600254815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550602082015181600101556040820151816002019080519060200190611031929190611344565b509050506110416002548a610dad565b604080516001600160a01b038f168152602081018e9052908101829052606081018c90529095507f7b06466216d59eef8c3e9af46549eecf860e594162c5c7f7cc96995beea938a79060800160405180910390a1846004600060025481526020019081526020016000206002016000815481106110c0576110c0611830565b600091825260208220019190915560028054916110dc83611846565b91905055955050505050965096945050505050565b60008082516041036111275760208301516040840151606085015160001a61111b87828585611280565b9450945050505061112f565b506000905060025b9250929050565b600081600481111561114a5761114a611a4b565b036111525750565b600181600481111561116657611166611a4b565b036111b35760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610541565b60028160048111156111c7576111c7611a4b565b036112145760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610541565b600381600481111561122857611228611a4b565b03610c605760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610541565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156112b7575060009050600361133b565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561130b573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166113345760006001925092505061133b565b9150600090505b94509492505050565b82805482825590600052602060002090810192821561137f579160200282015b8281111561137f578251825591602001919060010190611364565b5061138b92915061138f565b5090565b5b8082111561138b5760008155600101611390565b6000602082840312156113b657600080fd5b81356001600160e01b0319811681146113ce57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126113fc57600080fd5b813567ffffffffffffffff80821115611417576114176113d5565b604051601f8301601f19908116603f0116810190828211818310171561143f5761143f6113d5565b8160405283815286602085880101111561145857600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f84011261148a57600080fd5b50813567ffffffffffffffff8111156114a257600080fd5b60208301915083602082850101111561112f57600080fd5b6000806000806000608086880312156114d257600080fd5b8535945060208601359350604086013567ffffffffffffffff808211156114f857600080fd5b61150489838a016113eb565b9450606088013591508082111561151a57600080fd5b5061152788828901611478565b969995985093965092949392505050565b6001600160a01b0381168114610c6057600080fd5b60006020828403121561155f57600080fd5b81356113ce81611538565b60006020828403121561157c57600080fd5b5035919050565b600081518084526020808501945080840160005b838110156115b357815187529582019590820190600101611597565b509495945050505050565b6020815260018060a01b03825116602082015260208201516040820152600060408301516060808401526115f56080840182611583565b949350505050565b60008060008060008060a0878903121561161657600080fd5b863561162181611538565b95506020870135945060408701359350606087013567ffffffffffffffff8082111561164c57600080fd5b6116588a838b016113eb565b9450608089013591508082111561166e57600080fd5b5061167b89828a01611478565b979a9699509497509295939492505050565b600080604083850312156116a057600080fd5b82356116ab81611538565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156116f1578351835292840192918401916001016116d5565b50909695505050505050565b60005b83811015611718578181015183820152602001611700565b50506000910152565b600081518084526117398160208601602086016116fd565b601f01601f19169290920160200192915050565b80518252600060208201516060602085015261176c6060850182611583565b9050604083015184820360408601526117858282611721565b95945050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b828110156117e357603f198886030184526117d185835161174d565b945092850192908501906001016117b5565b5092979650505050505050565b6020815260006113ce602083018461174d565b838152826020820152600082516118218160408501602087016116fd565b91909101604001949350505050565b634e487b7160e01b600052603260045260246000fd5b60006001820161186657634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c9082168061188157607f821691505b6020821081036118a157634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156118b957600080fd5b81516113ce81611538565b6060815260006118d76060830186611721565b6001600160a01b0394851660208401529290931660409091015292915050565b601f821115610da857600081815260208120601f850160051c8101602086101561191e5750805b601f850160051c820191505b8181101561193d5782815560010161192a565b505050505050565b815167ffffffffffffffff81111561195f5761195f6113d5565b6119738161196d845461186d565b846118f7565b602080601f8311600181146119a857600084156119905750858301515b600019600386901b1c1916600185901b17855561193d565b600085815260208120601f198616915b828110156119d7578886015182559484019460019091019084016119b8565b50858210156119f55787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6bffffffffffffffffffffffff198560601b16815283601482015282603482015260008251611a3b8160548501602087016116fd565b9190910160540195945050505050565b634e487b7160e01b600052602160045260246000fdfea2646970667358221220f8758794f3fda460da73d258f4446155e006859bf3b0fb4aa95b5a18412c8f2964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMemoryTree(address,uint256,bytes32,string,bytes)": {
        "params": {
          "brainAddress": "The address of the brain contract to run compute against.",
          "brainId": "The token id for the brain to run compute against.",
          "nodeHash": "A studio identifier for this node.",
          "signature": "Function parameters hashed and signed by the signer.",
          "storageURI": "The storage URI for the new node."
        },
        "returns": {
          "nodeId": "The new node id.",
          "treeId": "The new tree id."
        }
      },
      "addNode(uint256,bytes32,string,bytes)": {
        "params": {
          "nodeHash": "A studio identifier for this node.",
          "parentNodeId": "The parent node for the new node.",
          "signature": "Function parameters hashed and signed by the signer.",
          "storageURI": "The storage URI for the new node."
        },
        "returns": {
          "nodeId": "The new node id."
        }
      },
      "getMemoryNode(uint256)": {
        "params": {
          "index": "The index of the memory tree node to return."
        },
        "returns": {
          "node": "The memory tree node."
        }
      },
      "getMemoryTreeDetails(uint256)": {
        "params": {
          "index": "The index of the memory tree details to return."
        },
        "returns": {
          "details": "The memory tree details."
        }
      },
      "getSigner()": {
        "returns": {
          "signer": "The signing address."
        }
      },
      "memoryNodeIdsOfMemoryTree(uint256)": {
        "details": "This function is expensive and should NOT be called in write functions.",
        "params": {
          "treeId": "The id for the memory to enumerate."
        },
        "returns": {
          "indexes": "The indexes of memory tree nodes."
        }
      },
      "memoryNodesOfMemoryTree(uint256)": {
        "details": "This function is expensive and should NOT be called in write functions.",
        "params": {
          "treeId": "The id for the memory to enumerate."
        },
        "returns": {
          "treeNodes": "The memory tree nodes."
        }
      },
      "memoryTreesOfBrain(address,uint256)": {
        "details": "This function is expensive and should NOT be called in write functions.",
        "params": {
          "brainAddress": "The address of the brain contract.",
          "brainId": "The token id for the brain."
        },
        "returns": {
          "indexes": "The indexes of memory trees."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSigner(address)": {
        "params": {
          "signer": "The signing address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMemoryTree(address,uint256,bytes32,string,bytes)": {
        "notice": "Add a root node to create a new memory tree for a given brain."
      },
      "addNode(uint256,bytes32,string,bytes)": {
        "notice": "Add a node to the memory tree for a given brain."
      },
      "getMemoryNode(uint256)": {
        "notice": "Get memory tree node."
      },
      "getMemoryTreeDetails(uint256)": {
        "notice": "Get memory tree details."
      },
      "getSigner()": {
        "notice": "Returns the signer that validates requests."
      },
      "memoryNodeIdsOfMemoryTree(uint256)": {
        "notice": "List all indexes of memory trees associated with the caller."
      },
      "memoryNodesOfMemoryTree(uint256)": {
        "notice": "List all indexes of memory trees associated with the caller."
      },
      "memoryTreesOfBrain(address,uint256)": {
        "notice": "List all indexes of memory trees associated with the brain."
      },
      "setSigner(address)": {
        "notice": "Set the signer the validates requests."
      }
    },
    "notice": "An implementation of the Memory Tree interface for Pong. This implementation ensures only one brain address is used.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2296,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5524,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "_signer",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5526,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "totalTrees",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5528,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "totalNodes",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5533,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "trees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(MemoryTreeDetails)5110_storage)"
      },
      {
        "astId": 5538,
        "contract": "src/PongMemoryTree.sol:PongMemoryTree",
        "label": "nodes",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(MemoryNode)5118_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(MemoryNode)5118_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMemoryTree.MemoryNode)",
        "numberOfBytes": "32",
        "value": "t_struct(MemoryNode)5118_storage"
      },
      "t_mapping(t_uint256,t_struct(MemoryTreeDetails)5110_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IMemoryTree.MemoryTreeDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(MemoryTreeDetails)5110_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MemoryNode)5118_storage": {
        "encoding": "inplace",
        "label": "struct IMemoryTree.MemoryNode",
        "members": [
          {
            "astId": 5112,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "memoryTreeId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5115,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "children",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 5117,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "storageURI",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(MemoryTreeDetails)5110_storage": {
        "encoding": "inplace",
        "label": "struct IMemoryTree.MemoryTreeDetails",
        "members": [
          {
            "astId": 5104,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "brainAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5106,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "brainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5109,
            "contract": "src/PongMemoryTree.sol:PongMemoryTree",
            "label": "rootNodes",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
